{"version":3,"file":"SpriteRenderer.js","names":["TICK","TEXTURE_TICK","SpriteRenderer","ObjectRenderer","constructor","renderer","vertSize","vertByteSize","size","settings","SPRITE_BATCH_SIZE","buffers","i","bitTwiddle","nextPow2","push","Buffer","indices","createIndicesForQuads","shader","currentIndex","groups","k","textures","textureCount","ids","start","blend","sprites","vertexBuffers","vaos","vaoMax","vertexCount","on","onPrerender","onContextChange","gl","legacy","MAX_TEXTURES","Math","min","getParameter","MAX_TEXTURE_IMAGE_UNITS","SPRITE_MAX_TEXTURES","checkMaxIfStatmentsInShader","generateMultiTextureShader","indexBuffer","glCore","GLBuffer","createIndexBuffer","STATIC_DRAW","bindVao","attrs","attributes","vertexBuffer","createVertexBuffer","STREAM_DRAW","vao","createVao","addIndex","addAttribute","aVertexPosition","FLOAT","aTextureCoord","UNSIGNED_SHORT","aColor","UNSIGNED_BYTE","aTextureId","currentBlendMode","boundTextures","Array","render","sprite","flush","_texture","_uvs","np2","log2","buffer","float32View","uint32View","rendererBoundTextures","touch","textureGC","count","index","nextTexture","currentTexture","groupCount","currentGroup","vertexData","uvs","blendMode","premultiplyBlendMode","baseTexture","premultipliedAlpha","bt","_enabled","emptyTextures","_virtalBoundId","spriteBlendMode","Number","touched","j","tIndex","t","uvsUint32","roundPixels","resolution","alpha","worldAlpha","argb","premultiplyTint","_tintRGB","CAN_UPLOAD_SAME_BUFFER","upload","vertices","group","groupTextureCount","bindTexture","state","setBlendMode","drawElements","TRIANGLES","bindShader","bind","stop","destroy","off","length","WebGLRenderer","registerPlugin"],"sources":["../../../src/sprites/webgl/SpriteRenderer.js"],"sourcesContent":["import ObjectRenderer from \"../../renderers/webgl/utils/ObjectRenderer\";\nimport WebGLRenderer from \"../../renderers/webgl/WebGLRenderer\";\nimport createIndicesForQuads from \"../../utils/createIndicesForQuads\";\nimport generateMultiTextureShader from \"./generateMultiTextureShader\";\nimport checkMaxIfStatmentsInShader from \"../../renderers/webgl/utils/checkMaxIfStatmentsInShader\";\nimport Buffer from \"./BatchBuffer\";\nimport settings from \"../../settings\";\nimport { premultiplyBlendMode, premultiplyTint } from \"../../utils\";\nimport glCore from \"pixi-gl-core\";\nimport bitTwiddle from \"bit-twiddle\";\n\nlet TICK = 0;\nlet TEXTURE_TICK = 0;\n\nexport default class SpriteRenderer extends ObjectRenderer {\n  constructor(renderer) {\n    super(renderer);\n\n    this.vertSize = 5;\n    this.vertByteSize = this.vertSize * 4;\n    this.size = settings.SPRITE_BATCH_SIZE; // 2000 is a nice balance between mobile / desktop\n\n    // the total number of bytes in our batch\n    // let numVerts = this.size * 4 * this.vertByteSize;\n\n    this.buffers = [];\n    for (let i = 1; i <= bitTwiddle.nextPow2(this.size); i *= 2) {\n      this.buffers.push(new Buffer(i * 4 * this.vertByteSize));\n    }\n\n    /**\n     * Holds the indices of the geometry (quads) to draw\n     *\n     * @member {Uint16Array}\n     */\n    this.indices = createIndicesForQuads(this.size);\n\n    /**\n     * The default shaders that is used if a sprite doesn't have a more specific one.\n     * there is a shader for each number of textures that can be rendererd.\n     * These shaders will also be generated on the fly as required.\n     * @member {InkPaint.Shader[]}\n     */\n    this.shader = null;\n\n    this.currentIndex = 0;\n    this.groups = [];\n\n    for (let k = 0; k < this.size; k++) {\n      this.groups[k] = {\n        textures: [],\n        textureCount: 0,\n        ids: [],\n        size: 0,\n        start: 0,\n        blend: 0\n      };\n    }\n\n    this.sprites = [];\n\n    this.vertexBuffers = [];\n    this.vaos = [];\n\n    this.vaoMax = 2;\n    this.vertexCount = 0;\n\n    this.renderer.on(\"prerender\", this.onPrerender, this);\n  }\n\n  /**\n   * Sets up the renderer context and necessary buffers.\n   *\n   * @private\n   */\n  onContextChange() {\n    const gl = this.renderer.gl;\n\n    if (this.renderer.legacy) {\n      this.MAX_TEXTURES = 1;\n    } else {\n      // step 1: first check max textures the GPU can handle.\n      this.MAX_TEXTURES = Math.min(\n        gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS),\n        settings.SPRITE_MAX_TEXTURES\n      );\n\n      // step 2: check the maximum number of if statements the shader can have too..\n      this.MAX_TEXTURES = checkMaxIfStatmentsInShader(this.MAX_TEXTURES, gl);\n    }\n\n    this.shader = generateMultiTextureShader(gl, this.MAX_TEXTURES);\n\n    // create a couple of buffers\n    this.indexBuffer = glCore.GLBuffer.createIndexBuffer(\n      gl,\n      this.indices,\n      gl.STATIC_DRAW\n    );\n\n    // we use the second shader as the first one depending on your browser may omit aTextureId\n    // as it is not used by the shader so is optimized out.\n\n    this.renderer.bindVao(null);\n\n    const attrs = this.shader.attributes;\n\n    for (let i = 0; i < this.vaoMax; i++) {\n      /* eslint-disable max-len */\n      const vertexBuffer = (this.vertexBuffers[\n        i\n      ] = glCore.GLBuffer.createVertexBuffer(gl, null, gl.STREAM_DRAW));\n      /* eslint-enable max-len */\n\n      // build the vao object that will render..\n      const vao = this.renderer\n        .createVao()\n        .addIndex(this.indexBuffer)\n        .addAttribute(\n          vertexBuffer,\n          attrs.aVertexPosition,\n          gl.FLOAT,\n          false,\n          this.vertByteSize,\n          0\n        )\n        .addAttribute(\n          vertexBuffer,\n          attrs.aTextureCoord,\n          gl.UNSIGNED_SHORT,\n          true,\n          this.vertByteSize,\n          2 * 4\n        )\n        .addAttribute(\n          vertexBuffer,\n          attrs.aColor,\n          gl.UNSIGNED_BYTE,\n          true,\n          this.vertByteSize,\n          3 * 4\n        );\n\n      if (attrs.aTextureId) {\n        vao.addAttribute(\n          vertexBuffer,\n          attrs.aTextureId,\n          gl.FLOAT,\n          false,\n          this.vertByteSize,\n          4 * 4\n        );\n      }\n\n      this.vaos[i] = vao;\n    }\n\n    this.vao = this.vaos[0];\n    this.currentBlendMode = 99999;\n\n    this.boundTextures = new Array(this.MAX_TEXTURES);\n  }\n\n  /**\n   * Called before the renderer starts rendering.\n   *\n   */\n  onPrerender() {\n    this.vertexCount = 0;\n  }\n\n  /**\n   * Renders the sprite object.\n   *\n   * @param {InkPaint.Sprite} sprite - the sprite to render when using this spritebatch\n   */\n  render(sprite) {\n    // TODO set blend modes..\n    // check texture..\n    if (this.currentIndex >= this.size) {\n      this.flush();\n    }\n\n    // get the uvs for the texture\n\n    // if the uvs have not updated then no point rendering just yet!\n    if (!sprite._texture._uvs) {\n      return;\n    }\n\n    // push a texture.\n    // increment the batchsize\n    this.sprites[this.currentIndex++] = sprite;\n  }\n\n  /**\n   * Renders the content and empties the current batch.\n   *\n   */\n  flush() {\n    if (this.currentIndex === 0) {\n      return;\n    }\n\n    const gl = this.renderer.gl;\n    const MAX_TEXTURES = this.MAX_TEXTURES;\n\n    const np2 = bitTwiddle.nextPow2(this.currentIndex);\n    const log2 = bitTwiddle.log2(np2);\n    const buffer = this.buffers[log2];\n\n    const sprites = this.sprites;\n    const groups = this.groups;\n\n    const float32View = buffer.float32View;\n    const uint32View = buffer.uint32View;\n\n    const boundTextures = this.boundTextures;\n    const rendererBoundTextures = this.renderer.boundTextures;\n    const touch = this.renderer.textureGC.count;\n\n    let index = 0;\n    let nextTexture;\n    let currentTexture;\n    let groupCount = 1;\n    let textureCount = 0;\n    let currentGroup = groups[0];\n    let vertexData;\n    let uvs;\n    let blendMode =\n      premultiplyBlendMode[\n        sprites[0]._texture.baseTexture.premultipliedAlpha ? 1 : 0\n      ][sprites[0].blendMode];\n\n    currentGroup.textureCount = 0;\n    currentGroup.start = 0;\n    currentGroup.blend = blendMode;\n\n    TICK++;\n\n    let i;\n\n    // copy textures..\n    for (i = 0; i < MAX_TEXTURES; ++i) {\n      const bt = rendererBoundTextures[i];\n\n      if (bt._enabled === TICK) {\n        boundTextures[i] = this.renderer.emptyTextures[i];\n        continue;\n      }\n\n      boundTextures[i] = bt;\n      bt._virtalBoundId = i;\n      bt._enabled = TICK;\n    }\n    TICK++;\n\n    for (i = 0; i < this.currentIndex; ++i) {\n      // upload the sprite elemetns...\n      // they have all ready been calculated so we just need to push them into the buffer.\n      const sprite = sprites[i];\n\n      sprites[i] = null;\n\n      nextTexture = sprite._texture.baseTexture;\n\n      const spriteBlendMode =\n        premultiplyBlendMode[Number(nextTexture.premultipliedAlpha)][\n          sprite.blendMode\n        ];\n\n      if (blendMode !== spriteBlendMode) {\n        // finish a group..\n        blendMode = spriteBlendMode;\n\n        // force the batch to break!\n        currentTexture = null;\n        textureCount = MAX_TEXTURES;\n        TICK++;\n      }\n\n      if (currentTexture !== nextTexture) {\n        currentTexture = nextTexture;\n\n        if (nextTexture._enabled !== TICK) {\n          if (textureCount === MAX_TEXTURES) {\n            TICK++;\n\n            currentGroup.size = i - currentGroup.start;\n\n            textureCount = 0;\n\n            currentGroup = groups[groupCount++];\n            currentGroup.blend = blendMode;\n            currentGroup.textureCount = 0;\n            currentGroup.start = i;\n          }\n\n          nextTexture.touched = touch;\n\n          if (nextTexture._virtalBoundId === -1) {\n            for (let j = 0; j < MAX_TEXTURES; ++j) {\n              const tIndex = (j + TEXTURE_TICK) % MAX_TEXTURES;\n\n              const t = boundTextures[tIndex];\n\n              if (t._enabled !== TICK) {\n                TEXTURE_TICK++;\n\n                t._virtalBoundId = -1;\n\n                nextTexture._virtalBoundId = tIndex;\n\n                boundTextures[tIndex] = nextTexture;\n                break;\n              }\n            }\n          }\n\n          nextTexture._enabled = TICK;\n\n          currentGroup.textureCount++;\n          currentGroup.ids[textureCount] = nextTexture._virtalBoundId;\n          currentGroup.textures[textureCount++] = nextTexture;\n        }\n      }\n\n      vertexData = sprite.vertexData;\n\n      // TODO this sum does not need to be set each frame..\n      uvs = sprite._texture._uvs.uvsUint32;\n\n      if (this.renderer.roundPixels) {\n        const resolution = this.renderer.resolution;\n\n        // xy\n        float32View[index] = ((vertexData[0] * resolution) | 0) / resolution;\n        float32View[index + 1] =\n          ((vertexData[1] * resolution) | 0) / resolution;\n\n        // xy\n        float32View[index + 5] =\n          ((vertexData[2] * resolution) | 0) / resolution;\n        float32View[index + 6] =\n          ((vertexData[3] * resolution) | 0) / resolution;\n\n        // xy\n        float32View[index + 10] =\n          ((vertexData[4] * resolution) | 0) / resolution;\n        float32View[index + 11] =\n          ((vertexData[5] * resolution) | 0) / resolution;\n\n        // xy\n        float32View[index + 15] =\n          ((vertexData[6] * resolution) | 0) / resolution;\n        float32View[index + 16] =\n          ((vertexData[7] * resolution) | 0) / resolution;\n      } else {\n        // xy\n        float32View[index] = vertexData[0];\n        float32View[index + 1] = vertexData[1];\n\n        // xy\n        float32View[index + 5] = vertexData[2];\n        float32View[index + 6] = vertexData[3];\n\n        // xy\n        float32View[index + 10] = vertexData[4];\n        float32View[index + 11] = vertexData[5];\n\n        // xy\n        float32View[index + 15] = vertexData[6];\n        float32View[index + 16] = vertexData[7];\n      }\n\n      uint32View[index + 2] = uvs[0];\n      uint32View[index + 7] = uvs[1];\n      uint32View[index + 12] = uvs[2];\n      uint32View[index + 17] = uvs[3];\n\n      /* eslint-disable max-len */\n      const alpha = Math.min(sprite.worldAlpha, 1.0);\n      // we dont call extra function if alpha is 1.0, that's faster\n      const argb =\n        alpha < 1.0 && nextTexture.premultipliedAlpha\n          ? premultiplyTint(sprite._tintRGB, alpha)\n          : sprite._tintRGB + ((alpha * 255) << 24);\n\n      uint32View[index + 3] = uint32View[index + 8] = uint32View[\n        index + 13\n      ] = uint32View[index + 18] = argb;\n      float32View[index + 4] = float32View[index + 9] = float32View[\n        index + 14\n      ] = float32View[index + 19] = nextTexture._virtalBoundId;\n      /* eslint-enable max-len */\n\n      index += 20;\n    }\n\n    currentGroup.size = i - currentGroup.start;\n\n    if (!settings.CAN_UPLOAD_SAME_BUFFER) {\n      // this is still needed for IOS performance..\n      // it really does not like uploading to the same buffer in a single frame!\n      if (this.vaoMax <= this.vertexCount) {\n        this.vaoMax++;\n\n        const attrs = this.shader.attributes;\n\n        /* eslint-disable max-len */\n        const vertexBuffer = (this.vertexBuffers[\n          this.vertexCount\n        ] = glCore.GLBuffer.createVertexBuffer(gl, null, gl.STREAM_DRAW));\n        /* eslint-enable max-len */\n\n        // build the vao object that will render..\n        const vao = this.renderer\n          .createVao()\n          .addIndex(this.indexBuffer)\n          .addAttribute(\n            vertexBuffer,\n            attrs.aVertexPosition,\n            gl.FLOAT,\n            false,\n            this.vertByteSize,\n            0\n          )\n          .addAttribute(\n            vertexBuffer,\n            attrs.aTextureCoord,\n            gl.UNSIGNED_SHORT,\n            true,\n            this.vertByteSize,\n            2 * 4\n          )\n          .addAttribute(\n            vertexBuffer,\n            attrs.aColor,\n            gl.UNSIGNED_BYTE,\n            true,\n            this.vertByteSize,\n            3 * 4\n          );\n\n        if (attrs.aTextureId) {\n          vao.addAttribute(\n            vertexBuffer,\n            attrs.aTextureId,\n            gl.FLOAT,\n            false,\n            this.vertByteSize,\n            4 * 4\n          );\n        }\n\n        this.vaos[this.vertexCount] = vao;\n      }\n\n      this.renderer.bindVao(this.vaos[this.vertexCount]);\n\n      this.vertexBuffers[this.vertexCount].upload(buffer.vertices, 0, false);\n\n      this.vertexCount++;\n    } else {\n      // lets use the faster option, always use buffer number 0\n      this.vertexBuffers[this.vertexCount].upload(buffer.vertices, 0, true);\n    }\n\n    for (i = 0; i < MAX_TEXTURES; ++i) {\n      rendererBoundTextures[i]._virtalBoundId = -1;\n    }\n\n    // render the groups..\n    for (i = 0; i < groupCount; ++i) {\n      const group = groups[i];\n      const groupTextureCount = group.textureCount;\n\n      for (let j = 0; j < groupTextureCount; j++) {\n        currentTexture = group.textures[j];\n\n        // reset virtual ids..\n        // lets do a quick check..\n        if (rendererBoundTextures[group.ids[j]] !== currentTexture) {\n          this.renderer.bindTexture(currentTexture, group.ids[j], true);\n        }\n\n        // reset the virtualId..\n        currentTexture._virtalBoundId = -1;\n      }\n\n      // set the blend mode..\n      this.renderer.state.setBlendMode(group.blend);\n\n      gl.drawElements(\n        gl.TRIANGLES,\n        group.size * 6,\n        gl.UNSIGNED_SHORT,\n        group.start * 6 * 2\n      );\n    }\n\n    // reset elements for the next flush\n    this.currentIndex = 0;\n  }\n\n  /**\n   * Starts a new sprite batch.\n   */\n  start() {\n    this.renderer.bindShader(this.shader);\n\n    if (settings.CAN_UPLOAD_SAME_BUFFER) {\n      // bind buffer #0, we don't need others\n      this.renderer.bindVao(this.vaos[this.vertexCount]);\n\n      this.vertexBuffers[this.vertexCount].bind();\n    }\n  }\n\n  /**\n   * Stops and flushes the current batch.\n   *\n   */\n  stop() {\n    this.flush();\n  }\n\n  /**\n   * Destroys the SpriteRenderer.\n   *\n   */\n  destroy() {\n    for (let i = 0; i < this.vaoMax; i++) {\n      if (this.vertexBuffers[i]) {\n        this.vertexBuffers[i].destroy();\n      }\n      if (this.vaos[i]) {\n        this.vaos[i].destroy();\n      }\n    }\n\n    if (this.indexBuffer) {\n      this.indexBuffer.destroy();\n    }\n\n    this.renderer.off(\"prerender\", this.onPrerender, this);\n\n    super.destroy();\n\n    if (this.shader) {\n      this.shader.destroy();\n      this.shader = null;\n    }\n\n    this.vertexBuffers = null;\n    this.vaos = null;\n    this.indexBuffer = null;\n    this.indices = null;\n    this.sprites = null;\n\n    for (let i = 0; i < this.buffers.length; ++i) {\n      this.buffers[i].destroy();\n    }\n  }\n}\n\nWebGLRenderer.registerPlugin(\"sprite\", SpriteRenderer);\n"],"mappings":"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"}