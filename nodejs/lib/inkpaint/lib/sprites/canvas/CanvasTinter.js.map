{"version":3,"file":"CanvasTinter.js","names":["CanvasTinter","getTintedTexture","sprite","color","texture","_texture","roundColor","stringColor","toString","substr","tintCache","cachedTexture","canvas","tintId","_updateID","tintMethod","convertTintToImage","tintImage","PsImage","src","toDataURL","tintWithMultiply","context","getContext","crop","_frame","clone","resolution","baseTexture","x","y","width","height","Math","ceil","save","fillStyle","fillRect","globalCompositeOperation","drawImage","source","restore","tintWithOverlay","tintWithPerPixel","rgbValues","hex2rgb","r","g","b","pixelData","getImageData","pixels","data","i","length","putImageData","step","cacheStepsPerColorChannel","min","rgb2hex","canUseMultiply","canUseNewCanvasBlendModes"],"sources":["../../../src/sprites/canvas/CanvasTinter.js"],"sourcesContent":["import PsImage from \"../../polyfill/Image\";\nimport { hex2rgb, rgb2hex } from \"../../utils\";\nimport canUseNewCanvasBlendModes from \"../../renderers/canvas/utils/canUseNewCanvasBlendModes\";\n\nconst CanvasTinter = {\n  getTintedTexture: (sprite, color) => {\n    const texture = sprite._texture;\n    color = CanvasTinter.roundColor(color);\n    const stringColor = `#${`00000${(color | 0).toString(16)}`.substr(-6)}`;\n    texture.tintCache = texture.tintCache || {};\n    const cachedTexture = texture.tintCache[stringColor];\n\n    let canvas;\n\n    if (cachedTexture) {\n      if (cachedTexture.tintId === texture._updateID) {\n        return texture.tintCache[stringColor];\n      }\n      canvas = texture.tintCache[stringColor];\n    } else {\n      canvas = CanvasTinter.canvas;\n    }\n\n    CanvasTinter.tintMethod(texture, color, canvas);\n\n    canvas.tintId = texture._updateID;\n\n    if (CanvasTinter.convertTintToImage) {\n      const tintImage = new PsImage();\n      tintImage.src = canvas.toDataURL();\n      texture.tintCache[stringColor] = tintImage;\n    } else {\n      texture.tintCache[stringColor] = canvas;\n      CanvasTinter.canvas = null;\n    }\n\n    return canvas;\n  },\n\n  tintWithMultiply: (texture, color, canvas) => {\n    const context = canvas.getContext(\"2d\");\n    const crop = texture._frame.clone();\n    const resolution = texture.baseTexture.resolution;\n\n    crop.x *= resolution;\n    crop.y *= resolution;\n    crop.width *= resolution;\n    crop.height *= resolution;\n\n    canvas.width = Math.ceil(crop.width);\n    canvas.height = Math.ceil(crop.height);\n\n    context.save();\n    context.fillStyle = `#${`00000${(color | 0).toString(16)}`.substr(-6)}`;\n\n    context.fillRect(0, 0, crop.width, crop.height);\n\n    context.globalCompositeOperation = \"multiply\";\n\n    context.drawImage(\n      texture.baseTexture.source,\n      crop.x,\n      crop.y,\n      crop.width,\n      crop.height,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n\n    context.globalCompositeOperation = \"destination-atop\";\n\n    context.drawImage(\n      texture.baseTexture.source,\n      crop.x,\n      crop.y,\n      crop.width,\n      crop.height,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n    context.restore();\n  },\n\n  tintWithOverlay(texture, color, canvas) {\n    const context = canvas.getContext(\"2d\");\n    const crop = texture._frame.clone();\n    const resolution = texture.baseTexture.resolution;\n\n    crop.x *= resolution;\n    crop.y *= resolution;\n    crop.width *= resolution;\n    crop.height *= resolution;\n\n    canvas.width = Math.ceil(crop.width);\n    canvas.height = Math.ceil(crop.height);\n\n    context.save();\n    context.globalCompositeOperation = \"copy\";\n    context.fillStyle = `#${`00000${(color | 0).toString(16)}`.substr(-6)}`;\n    context.fillRect(0, 0, crop.width, crop.height);\n\n    context.globalCompositeOperation = \"destination-atop\";\n    context.drawImage(\n      texture.baseTexture.source,\n      crop.x,\n      crop.y,\n      crop.width,\n      crop.height,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n\n    // context.globalCompositeOperation = 'copy';\n    context.restore();\n  },\n\n  tintWithPerPixel: (texture, color, canvas) => {\n    const context = canvas.getContext(\"2d\");\n    const crop = texture._frame.clone();\n    const resolution = texture.baseTexture.resolution;\n\n    crop.x *= resolution;\n    crop.y *= resolution;\n    crop.width *= resolution;\n    crop.height *= resolution;\n\n    canvas.width = Math.ceil(crop.width);\n    canvas.height = Math.ceil(crop.height);\n\n    context.save();\n    context.globalCompositeOperation = \"copy\";\n    context.drawImage(\n      texture.baseTexture.source,\n      crop.x,\n      crop.y,\n      crop.width,\n      crop.height,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n    context.restore();\n\n    const rgbValues = hex2rgb(color);\n    const r = rgbValues[0];\n    const g = rgbValues[1];\n    const b = rgbValues[2];\n\n    const pixelData = context.getImageData(0, 0, crop.width, crop.height);\n\n    const pixels = pixelData.data;\n\n    for (let i = 0; i < pixels.length; i += 4) {\n      pixels[i + 0] *= r;\n      pixels[i + 1] *= g;\n      pixels[i + 2] *= b;\n    }\n\n    context.putImageData(pixelData, 0, 0);\n  },\n\n  roundColor: color => {\n    const step = CanvasTinter.cacheStepsPerColorChannel;\n\n    const rgbValues = hex2rgb(color);\n\n    rgbValues[0] = Math.min(255, (rgbValues[0] / step) * step);\n    rgbValues[1] = Math.min(255, (rgbValues[1] / step) * step);\n    rgbValues[2] = Math.min(255, (rgbValues[2] / step) * step);\n\n    return rgb2hex(rgbValues);\n  },\n\n  cacheStepsPerColorChannel: 8,\n  convertTintToImage: false,\n  canUseMultiply: canUseNewCanvasBlendModes(),\n  tintMethod: 0\n};\n\nCanvasTinter.tintMethod = CanvasTinter.canUseMultiply\n  ? CanvasTinter.tintWithMultiply\n  : CanvasTinter.tintWithPerPixel;\n\nexport default CanvasTinter;\n"],"mappings":"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"}