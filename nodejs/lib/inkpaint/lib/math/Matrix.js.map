{"version":3,"file":"Matrix.js","names":["Matrix","constructor","a","b","c","d","tx","ty","array","fromArray","set","toArray","transpose","out","Float32Array","apply","pos","newPos","Point","x","y","applyInverse","id","translate","scale","rotate","angle","cos","Math","sin","a1","c1","tx1","append","matrix","b1","d1","setTransform","pivotX","pivotY","scaleX","scaleY","rotation","skewX","skewY","prepend","decompose","transform","atan2","delta","abs","PI_2","skew","sqrt","position","invert","n","identity","clone","copy","IDENTITY","TEMP_MATRIX"],"sources":["../../src/math/Matrix.js"],"sourcesContent":["import Point from \"./Point\";\nimport { PI_2 } from \"../const\";\n\nexport default class Matrix {\n  constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {\n    this.a = a;\n    this.b = b;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.c = c;\n\n    /**\n     * @member {number}\n     * @default 1\n     */\n    this.d = d;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.tx = tx;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.ty = ty;\n\n    this.array = null;\n  }\n\n  /**\n   * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:\n   *\n   * a = array[0]\n   * b = array[1]\n   * c = array[3]\n   * d = array[4]\n   * tx = array[2]\n   * ty = array[5]\n   *\n   * @param {number[]} array - The array that the matrix will be populated from.\n   */\n  fromArray(array) {\n    this.a = array[0];\n    this.b = array[1];\n    this.c = array[3];\n    this.d = array[4];\n    this.tx = array[2];\n    this.ty = array[5];\n  }\n\n  /**\n   * sets the matrix properties\n   *\n   * @param {number} a - Matrix component\n   * @param {number} b - Matrix component\n   * @param {number} c - Matrix component\n   * @param {number} d - Matrix component\n   * @param {number} tx - Matrix component\n   * @param {number} ty - Matrix component\n   *\n   * @return {InkPaint.Matrix} This matrix. Good for chaining method calls.\n   */\n  set(a, b, c, d, tx, ty) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.tx = tx;\n    this.ty = ty;\n\n    return this;\n  }\n\n  /**\n   * Creates an array from the current Matrix object.\n   *\n   * @param {boolean} transpose - Whether we need to transpose the matrix or not\n   * @param {Float32Array} [out=new Float32Array(9)] - If provided the array will be assigned to out\n   * @return {number[]} the newly created array which contains the matrix\n   */\n  toArray(transpose, out) {\n    if (!this.array) {\n      this.array = new Float32Array(9);\n    }\n\n    const array = out || this.array;\n\n    if (transpose) {\n      array[0] = this.a;\n      array[1] = this.b;\n      array[2] = 0;\n      array[3] = this.c;\n      array[4] = this.d;\n      array[5] = 0;\n      array[6] = this.tx;\n      array[7] = this.ty;\n      array[8] = 1;\n    } else {\n      array[0] = this.a;\n      array[1] = this.c;\n      array[2] = this.tx;\n      array[3] = this.b;\n      array[4] = this.d;\n      array[5] = this.ty;\n      array[6] = 0;\n      array[7] = 0;\n      array[8] = 1;\n    }\n\n    return array;\n  }\n\n  /**\n   * Get a new position with the current transformation applied.\n   * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\n   *\n   * @param {InkPaint.Point} pos - The origin\n   * @param {InkPaint.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n   * @return {InkPaint.Point} The new point, transformed through this matrix\n   */\n  apply(pos, newPos) {\n    newPos = newPos || new Point();\n\n    const x = pos.x;\n    const y = pos.y;\n\n    newPos.x = this.a * x + this.c * y + this.tx;\n    newPos.y = this.b * x + this.d * y + this.ty;\n\n    return newPos;\n  }\n\n  /**\n   * Get a new position with the inverse of the current transformation applied.\n   * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\n   *\n   * @param {InkPaint.Point} pos - The origin\n   * @param {InkPaint.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n   * @return {InkPaint.Point} The new point, inverse-transformed through this matrix\n   */\n  applyInverse(pos, newPos) {\n    newPos = newPos || new Point();\n\n    const id = 1 / (this.a * this.d + this.c * -this.b);\n\n    const x = pos.x;\n    const y = pos.y;\n\n    newPos.x =\n      this.d * id * x +\n      -this.c * id * y +\n      (this.ty * this.c - this.tx * this.d) * id;\n    newPos.y =\n      this.a * id * y +\n      -this.b * id * x +\n      (-this.ty * this.a + this.tx * this.b) * id;\n\n    return newPos;\n  }\n\n  /**\n   * Translates the matrix on the x and y.\n   *\n   * @param {number} x How much to translate x by\n   * @param {number} y How much to translate y by\n   * @return {InkPaint.Matrix} This matrix. Good for chaining method calls.\n   */\n  translate(x, y) {\n    this.tx += x;\n    this.ty += y;\n\n    return this;\n  }\n\n  /**\n   * Applies a scale transformation to the matrix.\n   *\n   * @param {number} x The amount to scale horizontally\n   * @param {number} y The amount to scale vertically\n   * @return {InkPaint.Matrix} This matrix. Good for chaining method calls.\n   */\n  scale(x, y) {\n    this.a *= x;\n    this.d *= y;\n    this.c *= x;\n    this.b *= y;\n    this.tx *= x;\n    this.ty *= y;\n\n    return this;\n  }\n\n  /**\n   * Applies a rotation transformation to the matrix.\n   *\n   * @param {number} angle - The angle in radians.\n   * @return {InkPaint.Matrix} This matrix. Good for chaining method calls.\n   */\n  rotate(angle) {\n    const cos = Math.cos(angle);\n    const sin = Math.sin(angle);\n\n    const a1 = this.a;\n    const c1 = this.c;\n    const tx1 = this.tx;\n\n    this.a = a1 * cos - this.b * sin;\n    this.b = a1 * sin + this.b * cos;\n    this.c = c1 * cos - this.d * sin;\n    this.d = c1 * sin + this.d * cos;\n    this.tx = tx1 * cos - this.ty * sin;\n    this.ty = tx1 * sin + this.ty * cos;\n\n    return this;\n  }\n\n  /**\n   * Appends the given Matrix to this Matrix.\n   *\n   * @param {InkPaint.Matrix} matrix - The matrix to append.\n   * @return {InkPaint.Matrix} This matrix. Good for chaining method calls.\n   */\n  append(matrix) {\n    const a1 = this.a;\n    const b1 = this.b;\n    const c1 = this.c;\n    const d1 = this.d;\n\n    this.a = matrix.a * a1 + matrix.b * c1;\n    this.b = matrix.a * b1 + matrix.b * d1;\n    this.c = matrix.c * a1 + matrix.d * c1;\n    this.d = matrix.c * b1 + matrix.d * d1;\n\n    this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;\n    this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;\n\n    return this;\n  }\n\n  /**\n   * Sets the matrix based on all the available properties\n   *\n   * @param {number} x - Position on the x axis\n   * @param {number} y - Position on the y axis\n   * @param {number} pivotX - Pivot on the x axis\n   * @param {number} pivotY - Pivot on the y axis\n   * @param {number} scaleX - Scale on the x axis\n   * @param {number} scaleY - Scale on the y axis\n   * @param {number} rotation - Rotation in radians\n   * @param {number} skewX - Skew on the x axis\n   * @param {number} skewY - Skew on the y axis\n   * @return {InkPaint.Matrix} This matrix. Good for chaining method calls.\n   */\n  setTransform(x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) {\n    this.a = Math.cos(rotation + skewY) * scaleX;\n    this.b = Math.sin(rotation + skewY) * scaleX;\n    this.c = -Math.sin(rotation - skewX) * scaleY;\n    this.d = Math.cos(rotation - skewX) * scaleY;\n\n    this.tx = x - (pivotX * this.a + pivotY * this.c);\n    this.ty = y - (pivotX * this.b + pivotY * this.d);\n\n    return this;\n  }\n\n  /**\n   * Prepends the given Matrix to this Matrix.\n   *\n   * @param {InkPaint.Matrix} matrix - The matrix to prepend\n   * @return {InkPaint.Matrix} This matrix. Good for chaining method calls.\n   */\n  prepend(matrix) {\n    const tx1 = this.tx;\n\n    if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {\n      const a1 = this.a;\n      const c1 = this.c;\n\n      this.a = a1 * matrix.a + this.b * matrix.c;\n      this.b = a1 * matrix.b + this.b * matrix.d;\n      this.c = c1 * matrix.a + this.d * matrix.c;\n      this.d = c1 * matrix.b + this.d * matrix.d;\n    }\n\n    this.tx = tx1 * matrix.a + this.ty * matrix.c + matrix.tx;\n    this.ty = tx1 * matrix.b + this.ty * matrix.d + matrix.ty;\n\n    return this;\n  }\n\n  /**\n   * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.\n   *\n   * @param {InkPaint.Transform|InkPaint.TransformStatic} transform - The transform to apply the properties to.\n   * @return {InkPaint.Transform|InkPaint.TransformStatic} The transform with the newly applied properties\n   */\n  decompose(transform) {\n    // sort out rotation / skew..\n    const a = this.a;\n    const b = this.b;\n    const c = this.c;\n    const d = this.d;\n\n    const skewX = -Math.atan2(-c, d);\n    const skewY = Math.atan2(b, a);\n\n    const delta = Math.abs(skewX + skewY);\n\n    if (delta < 0.00001 || Math.abs(PI_2 - delta) < 0.00001) {\n      transform.rotation = skewY;\n      transform.skew.x = transform.skew.y = 0;\n    } else {\n      transform.rotation = 0;\n      transform.skew.x = skewX;\n      transform.skew.y = skewY;\n    }\n\n    // next set scale\n    transform.scale.x = Math.sqrt(a * a + b * b);\n    transform.scale.y = Math.sqrt(c * c + d * d);\n\n    // next set position\n    transform.position.x = this.tx;\n    transform.position.y = this.ty;\n\n    return transform;\n  }\n\n  /**\n   * Inverts this matrix\n   *\n   * @return {InkPaint.Matrix} This matrix. Good for chaining method calls.\n   */\n  invert() {\n    const a1 = this.a;\n    const b1 = this.b;\n    const c1 = this.c;\n    const d1 = this.d;\n    const tx1 = this.tx;\n    const n = a1 * d1 - b1 * c1;\n\n    this.a = d1 / n;\n    this.b = -b1 / n;\n    this.c = -c1 / n;\n    this.d = a1 / n;\n    this.tx = (c1 * this.ty - d1 * tx1) / n;\n    this.ty = -(a1 * this.ty - b1 * tx1) / n;\n\n    return this;\n  }\n\n  /**\n   * Resets this Matix to an identity (default) matrix.\n   *\n   * @return {InkPaint.Matrix} This matrix. Good for chaining method calls.\n   */\n  identity() {\n    this.a = 1;\n    this.b = 0;\n    this.c = 0;\n    this.d = 1;\n    this.tx = 0;\n    this.ty = 0;\n\n    return this;\n  }\n\n  /**\n   * Creates a new Matrix object with the same values as this one.\n   *\n   * @return {InkPaint.Matrix} A copy of this matrix. Good for chaining method calls.\n   */\n  clone() {\n    const matrix = new Matrix();\n\n    matrix.a = this.a;\n    matrix.b = this.b;\n    matrix.c = this.c;\n    matrix.d = this.d;\n    matrix.tx = this.tx;\n    matrix.ty = this.ty;\n\n    return matrix;\n  }\n\n  /**\n   * Changes the values of the given matrix to be the same as the ones in this matrix\n   *\n   * @param {InkPaint.Matrix} matrix - The matrix to copy from.\n   * @return {InkPaint.Matrix} The matrix given in parameter with its values updated.\n   */\n  copy(matrix) {\n    matrix.a = this.a;\n    matrix.b = this.b;\n    matrix.c = this.c;\n    matrix.d = this.d;\n    matrix.tx = this.tx;\n    matrix.ty = this.ty;\n\n    return matrix;\n  }\n\n  /**\n   * A default (identity) matrix\n   *\n   * @static\n   * @const\n   */\n  static get IDENTITY() {\n    return new Matrix();\n  }\n\n  /**\n   * A temp matrix\n   *\n   * @static\n   * @const\n   */\n  static get TEMP_MATRIX() {\n    return new Matrix();\n  }\n}\n"],"mappings":"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"}