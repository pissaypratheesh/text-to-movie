{"version":3,"file":"Ellipse.js","names":["Ellipse","constructor","x","y","halfWidth","halfHeight","width","height","type","SHAPES","ELIP","clone","contains","normx","normy","getBounds","Rectangle"],"sources":["../../../src/math/shapes/Ellipse.js"],"sourcesContent":["import Rectangle from \"./Rectangle\";\nimport { SHAPES } from \"../../const\";\n\n/**\n * The Ellipse object can be used to specify a hit area for displayObjects\n *\n * @class\n * @memberof InkPaint\n */\nexport default class Ellipse {\n  /**\n   * @param {number} [x=0] - The X coordinate of the center of this ellipse\n   * @param {number} [y=0] - The Y coordinate of the center of this ellipse\n   * @param {number} [halfWidth=0] - The half width of this ellipse\n   * @param {number} [halfHeight=0] - The half height of this ellipse\n   */\n  constructor(x = 0, y = 0, halfWidth = 0, halfHeight = 0) {\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.x = x;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.y = y;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.width = halfWidth;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.height = halfHeight;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     *\n     * @member {number}\n     * @readOnly\n     * @default InkPaint.SHAPES.ELIP\n     * @see InkPaint.SHAPES\n     */\n    this.type = SHAPES.ELIP;\n  }\n\n  /**\n   * Creates a clone of this Ellipse instance\n   *\n   * @return {InkPaint.Ellipse} a copy of the ellipse\n   */\n  clone() {\n    return new Ellipse(this.x, this.y, this.width, this.height);\n  }\n\n  /**\n   * Checks whether the x and y coordinates given are contained within this ellipse\n   *\n   * @param {number} x - The X coordinate of the point to test\n   * @param {number} y - The Y coordinate of the point to test\n   * @return {boolean} Whether the x/y coords are within this ellipse\n   */\n  contains(x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n\n    // normalize the coords to an ellipse with center 0,0\n    let normx = (x - this.x) / this.width;\n    let normy = (y - this.y) / this.height;\n\n    normx *= normx;\n    normy *= normy;\n\n    return normx + normy <= 1;\n  }\n\n  /**\n   * Returns the framing rectangle of the ellipse as a Rectangle object\n   *\n   * @return {InkPaint.Rectangle} the framing rectangle\n   */\n  getBounds() {\n    return new Rectangle(\n      this.x - this.width,\n      this.y - this.height,\n      this.width,\n      this.height\n    );\n  }\n}\n"],"mappings":";;;;;;AAAA;AACA;AAAqC;AAErC;AACA;AACA;AACA;AACA;AACA;AACe,MAAMA,OAAO,CAAC;EAC3B;AACF;AACA;AACA;AACA;AACA;EACEC,WAAW,CAACC,CAAC,EAAMC,CAAC,EAAMC,SAAS,EAAMC,UAAU,EAAM;IAAA,IAA7CH,CAAC;MAADA,CAAC,GAAG,CAAC;IAAA;IAAA,IAAEC,CAAC;MAADA,CAAC,GAAG,CAAC;IAAA;IAAA,IAAEC,SAAS;MAATA,SAAS,GAAG,CAAC;IAAA;IAAA,IAAEC,UAAU;MAAVA,UAAU,GAAG,CAAC;IAAA;IACrD;AACJ;AACA;AACA;IACI,IAAI,CAACH,CAAC,GAAGA,CAAC;;IAEV;AACJ;AACA;AACA;IACI,IAAI,CAACC,CAAC,GAAGA,CAAC;;IAEV;AACJ;AACA;AACA;IACI,IAAI,CAACG,KAAK,GAAGF,SAAS;;IAEtB;AACJ;AACA;AACA;IACI,IAAI,CAACG,MAAM,GAAGF,UAAU;;IAExB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAACG,IAAI,GAAGC,aAAM,CAACC,IAAI;EACzB;;EAEA;AACF;AACA;AACA;AACA;EACEC,KAAK,GAAG;IACN,OAAO,IAAIX,OAAO,CAAC,IAAI,CAACE,CAAC,EAAE,IAAI,CAACC,CAAC,EAAE,IAAI,CAACG,KAAK,EAAE,IAAI,CAACC,MAAM,CAAC;EAC7D;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEK,QAAQ,CAACV,CAAC,EAAEC,CAAC,EAAE;IACb,IAAI,IAAI,CAACG,KAAK,IAAI,CAAC,IAAI,IAAI,CAACC,MAAM,IAAI,CAAC,EAAE;MACvC,OAAO,KAAK;IACd;;IAEA;IACA,IAAIM,KAAK,GAAG,CAACX,CAAC,GAAG,IAAI,CAACA,CAAC,IAAI,IAAI,CAACI,KAAK;IACrC,IAAIQ,KAAK,GAAG,CAACX,CAAC,GAAG,IAAI,CAACA,CAAC,IAAI,IAAI,CAACI,MAAM;IAEtCM,KAAK,IAAIA,KAAK;IACdC,KAAK,IAAIA,KAAK;IAEd,OAAOD,KAAK,GAAGC,KAAK,IAAI,CAAC;EAC3B;;EAEA;AACF;AACA;AACA;AACA;EACEC,SAAS,GAAG;IACV,OAAO,IAAIC,kBAAS,CAClB,IAAI,CAACd,CAAC,GAAG,IAAI,CAACI,KAAK,EACnB,IAAI,CAACH,CAAC,GAAG,IAAI,CAACI,MAAM,EACpB,IAAI,CAACD,KAAK,EACV,IAAI,CAACC,MAAM,CACZ;EACH;AACF;AAAC"}