{"version":3,"file":"Circle.js","names":["Circle","constructor","x","y","radius","type","SHAPES","CIRC","clone","contains","r2","dx","dy","getBounds","Rectangle"],"sources":["../../../src/math/shapes/Circle.js"],"sourcesContent":["import Rectangle from \"./Rectangle\";\nimport { SHAPES } from \"../../const\";\n\n/**\n * The Circle object can be used to specify a hit area for displayObjects\n *\n * @class\n * @memberof InkPaint\n */\nexport default class Circle {\n  /**\n   * @param {number} [x=0] - The X coordinate of the center of this circle\n   * @param {number} [y=0] - The Y coordinate of the center of this circle\n   * @param {number} [radius=0] - The radius of the circle\n   */\n  constructor(x = 0, y = 0, radius = 0) {\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.x = x;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.y = y;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.radius = radius;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     *\n     * @member {number}\n     * @readOnly\n     * @default InkPaint.SHAPES.CIRC\n     * @see InkPaint.SHAPES\n     */\n    this.type = SHAPES.CIRC;\n  }\n\n  /**\n   * Creates a clone of this Circle instance\n   *\n   * @return {InkPaint.Circle} a copy of the Circle\n   */\n  clone() {\n    return new Circle(this.x, this.y, this.radius);\n  }\n\n  /**\n   * Checks whether the x and y coordinates given are contained within this circle\n   *\n   * @param {number} x - The X coordinate of the point to test\n   * @param {number} y - The Y coordinate of the point to test\n   * @return {boolean} Whether the x/y coordinates are within this Circle\n   */\n  contains(x, y) {\n    if (this.radius <= 0) {\n      return false;\n    }\n\n    const r2 = this.radius * this.radius;\n    let dx = this.x - x;\n    let dy = this.y - y;\n\n    dx *= dx;\n    dy *= dy;\n\n    return dx + dy <= r2;\n  }\n\n  /**\n   * Returns the framing rectangle of the circle as a Rectangle object\n   *\n   * @return {InkPaint.Rectangle} the framing rectangle\n   */\n  getBounds() {\n    return new Rectangle(\n      this.x - this.radius,\n      this.y - this.radius,\n      this.radius * 2,\n      this.radius * 2\n    );\n  }\n}\n"],"mappings":";;;;;;AAAA;AACA;AAAqC;AAErC;AACA;AACA;AACA;AACA;AACA;AACe,MAAMA,MAAM,CAAC;EAC1B;AACF;AACA;AACA;AACA;EACEC,WAAW,CAACC,CAAC,EAAMC,CAAC,EAAMC,MAAM,EAAM;IAAA,IAA1BF,CAAC;MAADA,CAAC,GAAG,CAAC;IAAA;IAAA,IAAEC,CAAC;MAADA,CAAC,GAAG,CAAC;IAAA;IAAA,IAAEC,MAAM;MAANA,MAAM,GAAG,CAAC;IAAA;IAClC;AACJ;AACA;AACA;IACI,IAAI,CAACF,CAAC,GAAGA,CAAC;;IAEV;AACJ;AACA;AACA;IACI,IAAI,CAACC,CAAC,GAAGA,CAAC;;IAEV;AACJ;AACA;AACA;IACI,IAAI,CAACC,MAAM,GAAGA,MAAM;;IAEpB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAACC,IAAI,GAAGC,aAAM,CAACC,IAAI;EACzB;;EAEA;AACF;AACA;AACA;AACA;EACEC,KAAK,GAAG;IACN,OAAO,IAAIR,MAAM,CAAC,IAAI,CAACE,CAAC,EAAE,IAAI,CAACC,CAAC,EAAE,IAAI,CAACC,MAAM,CAAC;EAChD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEK,QAAQ,CAACP,CAAC,EAAEC,CAAC,EAAE;IACb,IAAI,IAAI,CAACC,MAAM,IAAI,CAAC,EAAE;MACpB,OAAO,KAAK;IACd;IAEA,IAAMM,EAAE,GAAG,IAAI,CAACN,MAAM,GAAG,IAAI,CAACA,MAAM;IACpC,IAAIO,EAAE,GAAG,IAAI,CAACT,CAAC,GAAGA,CAAC;IACnB,IAAIU,EAAE,GAAG,IAAI,CAACT,CAAC,GAAGA,CAAC;IAEnBQ,EAAE,IAAIA,EAAE;IACRC,EAAE,IAAIA,EAAE;IAER,OAAOD,EAAE,GAAGC,EAAE,IAAIF,EAAE;EACtB;;EAEA;AACF;AACA;AACA;AACA;EACEG,SAAS,GAAG;IACV,OAAO,IAAIC,kBAAS,CAClB,IAAI,CAACZ,CAAC,GAAG,IAAI,CAACE,MAAM,EACpB,IAAI,CAACD,CAAC,GAAG,IAAI,CAACC,MAAM,EACpB,IAAI,CAACA,MAAM,GAAG,CAAC,EACf,IAAI,CAACA,MAAM,GAAG,CAAC,CAChB;EACH;AACF;AAAC"}