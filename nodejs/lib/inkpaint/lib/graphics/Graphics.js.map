{"version":3,"file":"Graphics.js","names":["canvasRenderer","tempMatrix","Matrix","tempPoint","Point","tempColor1","Float32Array","tempColor2","Graphics","Container","constructor","nativeLines","fillAlpha","lineWidth","lineColor","lineAlignment","graphicsData","tint","_prevTint","blendMode","BLEND_MODES","NORMAL","currentPath","_webGL","isMask","boundsPadding","_localBounds","Bounds","dirty","fastRectDirty","clearDirty","boundsDirty","cachedSpriteDirty","_spriteRect","_fastRect","_prevRectTint","_prevRectFillColor","clone","renderable","i","length","push","updateLocalBounds","_quadraticCurveLength","fromX","fromY","cpX","cpY","toX","toY","ax","ay","bx","by","a","b","c","s","Math","sqrt","a2","a32","c2","ba","log","_bezierCurveLength","cpX2","cpY2","n","result","t","t2","t3","nt","nt2","nt3","x","y","dx","dy","prevX","prevY","_segmentsCount","ceil","CURVES","maxLength","minSegments","maxSegments","lineStyle","color","alpha","alignment","lineAlpha","shape","points","Polygon","slice","closed","drawShape","moveTo","lineTo","quadraticCurveTo","xa","ya","adaptive","j","bezierCurveTo","arcTo","x1","y1","x2","y2","radius","a1","b1","b2","mm","abs","dd","cc","tt","k1","k2","j1","j2","cx","cy","px","py","qx","qy","startAngle","atan2","endAngle","arc","anticlockwise","PI_2","sweep","segs","startX","cos","startY","sin","xDiff","yDiff","theta","theta2","cTheta","sTheta","segMinus","remainder","real","angle","beginFill","filling","fillColor","fill","endFill","drawRect","width","height","Rectangle","drawRoundedRect","RoundedRectangle","drawCircle","Circle","drawEllipse","Ellipse","drawPolygon","path","Array","isArray","arguments","drawStar","innerRadius","rotation","PI","len","delta","polygon","r","clear","canvasTintDirty","isFastRect","type","SHAPES","RECT","_renderWebGL","renderer","_renderSpriteRect","setObjectRenderer","plugins","graphics","render","rect","Sprite","Texture","EMPTY","sprite","t1","hex2rgb","rgb2hex","worldAlpha","_texture","_frame","transform","worldTransform","anchor","set","_onAnchorUpdate","_renderCanvas","_calculateBounds","lb","_bounds","addFrame","minX","minY","maxX","maxY","containsPoint","point","applyInverse","data","contains","hitHole","holes","hole","Infinity","w","h","lineOffset","RREC","CIRC","ELIP","rw","rh","padding","pop","GraphicsData","POLY","generateCanvasTexture","scaleMode","resolution","bounds","getLocalBounds","canvasBuffer","RenderTexture","create","CanvasRenderer","updateLocalTransform","localTransform","copy","invert","tx","ty","texture","fromCanvas","baseTexture","_canvasRenderTarget","canvas","update","closePath","close","addHole","destroy","options","id","_SPRITE_TEXTURE"],"sources":["../../src/graphics/Graphics.js"],"sourcesContent":["import Container from \"../display/Container\";\nimport RenderTexture from \"../textures/RenderTexture\";\nimport Texture from \"../textures/Texture\";\nimport GraphicsData from \"./GraphicsData\";\nimport Sprite from \"../sprites/Sprite\";\nimport {\n  Matrix,\n  Point,\n  Rectangle,\n  RoundedRectangle,\n  Ellipse,\n  Polygon,\n  Circle\n} from \"../math\";\nimport { hex2rgb, rgb2hex } from \"../utils\";\nimport { SHAPES, BLEND_MODES, PI_2 } from \"../const\";\nimport Bounds from \"../display/Bounds\";\nimport bezierCurveTo from \"./utils/bezierCurveTo\";\nimport CanvasRenderer from \"../renderers/canvas/CanvasRenderer\";\n\nlet canvasRenderer;\nconst tempMatrix = new Matrix();\nconst tempPoint = new Point();\nconst tempColor1 = new Float32Array(4);\nconst tempColor2 = new Float32Array(4);\n\nexport default class Graphics extends Container {\n  constructor(nativeLines = false) {\n    super();\n\n    this.fillAlpha = 1;\n\n    /**\n     * The width (thickness) of any lines drawn.\n     *\n     * @member {number}\n     * @default 0\n     */\n    this.lineWidth = 0;\n\n    /**\n     * If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n     *\n     * @member {boolean}\n     */\n    this.nativeLines = nativeLines;\n\n    /**\n     * The color of any lines drawn.\n     *\n     * @member {string}\n     * @default 0\n     */\n    this.lineColor = 0;\n\n    /**\n     * The alignment of any lines drawn (0.5 = middle, 1 = outter, 0 = inner).\n     *\n     * @member {number}\n     * @default 0.5\n     */\n    this.lineAlignment = 0.5;\n\n    /**\n     * Graphics data\n     *\n     * @member {InkPaint.GraphicsData[]}\n     * @private\n     */\n    this.graphicsData = [];\n\n    /**\n     * The tint applied to the graphic shape. This is a hex value. Apply a value of 0xFFFFFF to\n     * reset the tint.\n     *\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    this.tint = 0xffffff;\n\n    /**\n     * The previous tint applied to the graphic shape. Used to compare to the current tint and\n     * check if theres change.\n     *\n     * @member {number}\n     * @private\n     * @default 0xFFFFFF\n     */\n    this._prevTint = 0xffffff;\n\n    /**\n     * The blend mode to be applied to the graphic shape. Apply a value of\n     * `InkPaint.BLEND_MODES.NORMAL` to reset the blend mode.\n     *\n     * @member {number}\n     * @default InkPaint.BLEND_MODES.NORMAL;\n     * @see InkPaint.BLEND_MODES\n     */\n    this.blendMode = BLEND_MODES.NORMAL;\n\n    /**\n     * Current path\n     *\n     * @member {InkPaint.GraphicsData}\n     * @private\n     */\n    this.currentPath = null;\n\n    /**\n     * Array containing some WebGL-related properties used by the WebGL renderer.\n     *\n     * @member {object<number, object>}\n     * @private\n     */\n    // TODO - _webgl should use a prototype object, not a random undocumented object...\n    this._webGL = {};\n\n    /**\n     * Whether this shape is being used as a mask.\n     *\n     * @member {boolean}\n     */\n    this.isMask = false;\n\n    /**\n     * The bounds' padding used for bounds calculation.\n     *\n     * @member {number}\n     */\n    this.boundsPadding = 0;\n\n    /**\n     * A cache of the local bounds to prevent recalculation.\n     *\n     * @member {InkPaint.Rectangle}\n     * @private\n     */\n    this._localBounds = new Bounds();\n\n    /**\n     * Used to detect if the graphics object has changed. If this is set to true then the graphics\n     * object will be recalculated.\n     *\n     * @member {boolean}\n     * @private\n     */\n    this.dirty = 0;\n\n    /**\n     * Used to detect if we need to do a fast rect check using the id compare method\n     * @type {Number}\n     */\n    this.fastRectDirty = -1;\n\n    /**\n     * Used to detect if we clear the graphics webGL data\n     * @type {Number}\n     */\n    this.clearDirty = 0;\n\n    /**\n     * Used to detect if we we need to recalculate local bounds\n     * @type {Number}\n     */\n    this.boundsDirty = -1;\n\n    /**\n     * Used to detect if the cached sprite object needs to be updated.\n     *\n     * @member {boolean}\n     * @private\n     */\n    this.cachedSpriteDirty = false;\n\n    this._spriteRect = null;\n    this._fastRect = false;\n\n    this._prevRectTint = null;\n    this._prevRectFillColor = null;\n  }\n\n  clone() {\n    const clone = new Graphics();\n\n    clone.renderable = this.renderable;\n    clone.fillAlpha = this.fillAlpha;\n    clone.lineWidth = this.lineWidth;\n    clone.lineColor = this.lineColor;\n    clone.lineAlignment = this.lineAlignment;\n    clone.tint = this.tint;\n    clone.blendMode = this.blendMode;\n    clone.isMask = this.isMask;\n    clone.boundsPadding = this.boundsPadding;\n    clone.dirty = 0;\n    clone.cachedSpriteDirty = this.cachedSpriteDirty;\n\n    // copy graphics data\n    for (let i = 0; i < this.graphicsData.length; ++i) {\n      clone.graphicsData.push(this.graphicsData[i].clone());\n    }\n\n    clone.currentPath = clone.graphicsData[clone.graphicsData.length - 1];\n\n    clone.updateLocalBounds();\n\n    return clone;\n  }\n\n  /**\n   * Calculate length of quadratic curve\n   * @see {@link http://www.malczak.linuxpl.com/blog/quadratic-bezier-curve-length/}\n   * for the detailed explanation of math behind this.\n   *\n   * @private\n   * @param {number} fromX - x-coordinate of curve start point\n   * @param {number} fromY - y-coordinate of curve start point\n   * @param {number} cpX - x-coordinate of curve control point\n   * @param {number} cpY - y-coordinate of curve control point\n   * @param {number} toX - x-coordinate of curve end point\n   * @param {number} toY - y-coordinate of curve end point\n   * @return {number} Length of quadratic curve\n   */\n  _quadraticCurveLength(fromX, fromY, cpX, cpY, toX, toY) {\n    const ax = fromX - 2.0 * cpX + toX;\n    const ay = fromY - 2.0 * cpY + toY;\n    const bx = 2.0 * cpX - 2.0 * fromX;\n    const by = 2.0 * cpY - 2.0 * fromY;\n    const a = 4.0 * (ax * ax + ay * ay);\n    const b = 4.0 * (ax * bx + ay * by);\n    const c = bx * bx + by * by;\n\n    const s = 2.0 * Math.sqrt(a + b + c);\n    const a2 = Math.sqrt(a);\n    const a32 = 2.0 * a * a2;\n    const c2 = 2.0 * Math.sqrt(c);\n    const ba = b / a2;\n\n    return (\n      (a32 * s +\n        a2 * b * (s - c2) +\n        (4.0 * c * a - b * b) * Math.log((2.0 * a2 + ba + s) / (ba + c2))) /\n      (4.0 * a32)\n    );\n  }\n\n  /**\n   * Calculate length of bezier curve.\n   * Analytical solution is impossible, since it involves an integral that does not integrate in general.\n   * Therefore numerical solution is used.\n   *\n   * @private\n   * @param {number} fromX - Starting point x\n   * @param {number} fromY - Starting point y\n   * @param {number} cpX - Control point x\n   * @param {number} cpY - Control point y\n   * @param {number} cpX2 - Second Control point x\n   * @param {number} cpY2 - Second Control point y\n   * @param {number} toX - Destination point x\n   * @param {number} toY - Destination point y\n   * @return {number} Length of bezier curve\n   */\n  _bezierCurveLength(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY) {\n    const n = 10;\n    let result = 0.0;\n    let t = 0.0;\n    let t2 = 0.0;\n    let t3 = 0.0;\n    let nt = 0.0;\n    let nt2 = 0.0;\n    let nt3 = 0.0;\n    let x = 0.0;\n    let y = 0.0;\n    let dx = 0.0;\n    let dy = 0.0;\n    let prevX = fromX;\n    let prevY = fromY;\n\n    for (let i = 1; i <= n; ++i) {\n      t = i / n;\n      t2 = t * t;\n      t3 = t2 * t;\n      nt = 1.0 - t;\n      nt2 = nt * nt;\n      nt3 = nt2 * nt;\n\n      x = nt3 * fromX + 3.0 * nt2 * t * cpX + 3.0 * nt * t2 * cpX2 + t3 * toX;\n      y = nt3 * fromY + 3.0 * nt2 * t * cpY + 3 * nt * t2 * cpY2 + t3 * toY;\n      dx = prevX - x;\n      dy = prevY - y;\n      prevX = x;\n      prevY = y;\n\n      result += Math.sqrt(dx * dx + dy * dy);\n    }\n\n    return result;\n  }\n\n  /**\n   * Calculate number of segments for the curve based on its length to ensure its smoothness.\n   *\n   * @private\n   * @param {number} length - length of curve\n   * @return {number} Number of segments\n   */\n  _segmentsCount(length) {\n    let result = Math.ceil(length / Graphics.CURVES.maxLength);\n\n    if (result < Graphics.CURVES.minSegments) {\n      result = Graphics.CURVES.minSegments;\n    } else if (result > Graphics.CURVES.maxSegments) {\n      result = Graphics.CURVES.maxSegments;\n    }\n\n    return result;\n  }\n\n  /**\n   * Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()\n   * method or the drawCircle() method.\n   *\n   * @param {number} [lineWidth=0] - width of the line to draw, will update the objects stored style\n   * @param {number} [color=0] - color of the line to draw, will update the objects stored style\n   * @param {number} [alpha=1] - alpha of the line to draw, will update the objects stored style\n   * @param {number} [alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  lineStyle(lineWidth = 0, color = 0, alpha = 1, alignment = 0.5) {\n    this.lineWidth = lineWidth;\n    this.lineColor = color;\n    this.lineAlpha = alpha;\n    this.lineAlignment = alignment;\n\n    if (this.currentPath) {\n      if (this.currentPath.shape.points.length) {\n        // halfway through a line? start a new one!\n        const shape = new Polygon(this.currentPath.shape.points.slice(-2));\n\n        shape.closed = false;\n\n        this.drawShape(shape);\n      } else {\n        // otherwise its empty so lets just set the line properties\n        this.currentPath.lineWidth = this.lineWidth;\n        this.currentPath.lineColor = this.lineColor;\n        this.currentPath.lineAlpha = this.lineAlpha;\n        this.currentPath.lineAlignment = this.lineAlignment;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Moves the current drawing position to x, y.\n   *\n   * @param {number} x - the X coordinate to move to\n   * @param {number} y - the Y coordinate to move to\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  moveTo(x, y) {\n    const shape = new Polygon([x, y]);\n\n    shape.closed = false;\n    this.drawShape(shape);\n\n    return this;\n  }\n\n  /**\n   * Draws a line using the current line style from the current drawing position to (x, y);\n   * The current drawing position is then set to (x, y).\n   *\n   * @param {number} x - the X coordinate to draw to\n   * @param {number} y - the Y coordinate to draw to\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  lineTo(x, y) {\n    const points = this.currentPath.shape.points;\n\n    const fromX = points[points.length - 2];\n    const fromY = points[points.length - 1];\n\n    if (fromX !== x || fromY !== y) {\n      points.push(x, y);\n      this.dirty++;\n    }\n\n    return this;\n  }\n\n  /**\n   * Calculate the points for a quadratic bezier curve and then draws it.\n   * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n   *\n   * @param {number} cpX - Control point x\n   * @param {number} cpY - Control point y\n   * @param {number} toX - Destination point x\n   * @param {number} toY - Destination point y\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  quadraticCurveTo(cpX, cpY, toX, toY) {\n    if (this.currentPath) {\n      if (this.currentPath.shape.points.length === 0) {\n        this.currentPath.shape.points = [0, 0];\n      }\n    } else {\n      this.moveTo(0, 0);\n    }\n\n    const points = this.currentPath.shape.points;\n    let xa = 0;\n    let ya = 0;\n\n    if (points.length === 0) {\n      this.moveTo(0, 0);\n    }\n\n    const fromX = points[points.length - 2];\n    const fromY = points[points.length - 1];\n    const n = Graphics.CURVES.adaptive\n      ? this._segmentsCount(\n          this._quadraticCurveLength(fromX, fromY, cpX, cpY, toX, toY)\n        )\n      : 20;\n\n    for (let i = 1; i <= n; ++i) {\n      const j = i / n;\n\n      xa = fromX + (cpX - fromX) * j;\n      ya = fromY + (cpY - fromY) * j;\n\n      points.push(\n        xa + (cpX + (toX - cpX) * j - xa) * j,\n        ya + (cpY + (toY - cpY) * j - ya) * j\n      );\n    }\n\n    this.dirty++;\n\n    return this;\n  }\n\n  /**\n   * Calculate the points for a bezier curve and then draws it.\n   *\n   * @param {number} cpX - Control point x\n   * @param {number} cpY - Control point y\n   * @param {number} cpX2 - Second Control point x\n   * @param {number} cpY2 - Second Control point y\n   * @param {number} toX - Destination point x\n   * @param {number} toY - Destination point y\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  bezierCurveTo(cpX, cpY, cpX2, cpY2, toX, toY) {\n    if (this.currentPath) {\n      if (this.currentPath.shape.points.length === 0) {\n        this.currentPath.shape.points = [0, 0];\n      }\n    } else {\n      this.moveTo(0, 0);\n    }\n\n    const points = this.currentPath.shape.points;\n\n    const fromX = points[points.length - 2];\n    const fromY = points[points.length - 1];\n\n    points.length -= 2;\n\n    const n = Graphics.CURVES.adaptive\n      ? this._segmentsCount(\n          this._bezierCurveLength(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY)\n        )\n      : 20;\n\n    bezierCurveTo(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY, n, points);\n\n    this.dirty++;\n\n    return this;\n  }\n\n  /**\n   * The arcTo() method creates an arc/curve between two tangents on the canvas.\n   *\n   * \"borrowed\" from https://code.google.com/p/fxcanvas/ - thanks google!\n   *\n   * @param {number} x1 - The x-coordinate of the beginning of the arc\n   * @param {number} y1 - The y-coordinate of the beginning of the arc\n   * @param {number} x2 - The x-coordinate of the end of the arc\n   * @param {number} y2 - The y-coordinate of the end of the arc\n   * @param {number} radius - The radius of the arc\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  arcTo(x1, y1, x2, y2, radius) {\n    if (this.currentPath) {\n      if (this.currentPath.shape.points.length === 0) {\n        this.currentPath.shape.points.push(x1, y1);\n      }\n    } else {\n      this.moveTo(x1, y1);\n    }\n\n    const points = this.currentPath.shape.points;\n    const fromX = points[points.length - 2];\n    const fromY = points[points.length - 1];\n    const a1 = fromY - y1;\n    const b1 = fromX - x1;\n    const a2 = y2 - y1;\n    const b2 = x2 - x1;\n    const mm = Math.abs(a1 * b2 - b1 * a2);\n\n    if (mm < 1.0e-8 || radius === 0) {\n      if (\n        points[points.length - 2] !== x1 ||\n        points[points.length - 1] !== y1\n      ) {\n        points.push(x1, y1);\n      }\n    } else {\n      const dd = a1 * a1 + b1 * b1;\n      const cc = a2 * a2 + b2 * b2;\n      const tt = a1 * a2 + b1 * b2;\n      const k1 = (radius * Math.sqrt(dd)) / mm;\n      const k2 = (radius * Math.sqrt(cc)) / mm;\n      const j1 = (k1 * tt) / dd;\n      const j2 = (k2 * tt) / cc;\n      const cx = k1 * b2 + k2 * b1;\n      const cy = k1 * a2 + k2 * a1;\n      const px = b1 * (k2 + j1);\n      const py = a1 * (k2 + j1);\n      const qx = b2 * (k1 + j2);\n      const qy = a2 * (k1 + j2);\n      const startAngle = Math.atan2(py - cy, px - cx);\n      const endAngle = Math.atan2(qy - cy, qx - cx);\n\n      this.arc(\n        cx + x1,\n        cy + y1,\n        radius,\n        startAngle,\n        endAngle,\n        b1 * a2 > b2 * a1\n      );\n    }\n\n    this.dirty++;\n\n    return this;\n  }\n\n  /**\n   * The arc method creates an arc/curve (used to create circles, or parts of circles).\n   *\n   * @param {number} cx - The x-coordinate of the center of the circle\n   * @param {number} cy - The y-coordinate of the center of the circle\n   * @param {number} radius - The radius of the circle\n   * @param {number} startAngle - The starting angle, in radians (0 is at the 3 o'clock position\n   *  of the arc's circle)\n   * @param {number} endAngle - The ending angle, in radians\n   * @param {boolean} [anticlockwise=false] - Specifies whether the drawing should be\n   *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true\n   *  indicates counter-clockwise.\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  arc(cx, cy, radius, startAngle, endAngle, anticlockwise = false) {\n    if (startAngle === endAngle) {\n      return this;\n    }\n\n    if (!anticlockwise && endAngle <= startAngle) {\n      endAngle += PI_2;\n    } else if (anticlockwise && startAngle <= endAngle) {\n      startAngle += PI_2;\n    }\n\n    const sweep = endAngle - startAngle;\n    const segs = Graphics.CURVES.adaptive\n      ? this._segmentsCount(Math.abs(sweep) * radius)\n      : Math.ceil(Math.abs(sweep) / PI_2) * 40;\n\n    if (sweep === 0) {\n      return this;\n    }\n\n    const startX = cx + Math.cos(startAngle) * radius;\n    const startY = cy + Math.sin(startAngle) * radius;\n\n    // If the currentPath exists, take its points. Otherwise call `moveTo` to start a path.\n    let points = this.currentPath ? this.currentPath.shape.points : null;\n\n    if (points) {\n      // We check how far our start is from the last existing point\n      const xDiff = Math.abs(points[points.length - 2] - startX);\n      const yDiff = Math.abs(points[points.length - 1] - startY);\n\n      if (xDiff < 0.001 && yDiff < 0.001) {\n        // If the point is very close, we don't add it, since this would lead to artifacts\n        // during tesselation due to floating point imprecision.\n      } else {\n        points.push(startX, startY);\n      }\n    } else {\n      this.moveTo(startX, startY);\n      points = this.currentPath.shape.points;\n    }\n\n    const theta = sweep / (segs * 2);\n    const theta2 = theta * 2;\n\n    const cTheta = Math.cos(theta);\n    const sTheta = Math.sin(theta);\n\n    const segMinus = segs - 1;\n\n    const remainder = (segMinus % 1) / segMinus;\n\n    for (let i = 0; i <= segMinus; ++i) {\n      const real = i + remainder * i;\n\n      const angle = theta + startAngle + theta2 * real;\n\n      const c = Math.cos(angle);\n      const s = -Math.sin(angle);\n\n      points.push(\n        (cTheta * c + sTheta * s) * radius + cx,\n        (cTheta * -s + sTheta * c) * radius + cy\n      );\n    }\n\n    this.dirty++;\n\n    return this;\n  }\n\n  /**\n   * Specifies a simple one-color fill that subsequent calls to other Graphics methods\n   * (such as lineTo() or drawCircle()) use when drawing.\n   *\n   * @param {number} [color=0] - the color of the fill\n   * @param {number} [alpha=1] - the alpha of the fill\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  beginFill(color = 0, alpha = 1) {\n    this.filling = true;\n    this.fillColor = color;\n    this.fillAlpha = alpha;\n\n    if (this.currentPath) {\n      if (this.currentPath.shape.points.length <= 2) {\n        this.currentPath.fill = this.filling;\n        this.currentPath.fillColor = this.fillColor;\n        this.currentPath.fillAlpha = this.fillAlpha;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.\n   *\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  endFill() {\n    this.filling = false;\n    this.fillColor = null;\n    this.fillAlpha = 1;\n\n    return this;\n  }\n\n  /**\n   *\n   * @param {number} x - The X coord of the top-left of the rectangle\n   * @param {number} y - The Y coord of the top-left of the rectangle\n   * @param {number} width - The width of the rectangle\n   * @param {number} height - The height of the rectangle\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  drawRect(x, y, width, height) {\n    this.drawShape(new Rectangle(x, y, width, height));\n\n    return this;\n  }\n\n  /**\n   *\n   * @param {number} x - The X coord of the top-left of the rectangle\n   * @param {number} y - The Y coord of the top-left of the rectangle\n   * @param {number} width - The width of the rectangle\n   * @param {number} height - The height of the rectangle\n   * @param {number} radius - Radius of the rectangle corners\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  drawRoundedRect(x, y, width, height, radius) {\n    this.drawShape(new RoundedRectangle(x, y, width, height, radius));\n\n    return this;\n  }\n\n  /**\n   * Draws a circle.\n   *\n   * @param {number} x - The X coordinate of the center of the circle\n   * @param {number} y - The Y coordinate of the center of the circle\n   * @param {number} radius - The radius of the circle\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  drawCircle(x, y, radius) {\n    this.drawShape(new Circle(x, y, radius));\n\n    return this;\n  }\n\n  /**\n   * Draws an ellipse.\n   *\n   * @param {number} x - The X coordinate of the center of the ellipse\n   * @param {number} y - The Y coordinate of the center of the ellipse\n   * @param {number} width - The half width of the ellipse\n   * @param {number} height - The half height of the ellipse\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  drawEllipse(x, y, width, height) {\n    this.drawShape(new Ellipse(x, y, width, height));\n\n    return this;\n  }\n\n  /**\n   * Draws a polygon using the given path.\n   *\n   * @param {number[]|InkPaint.Point[]|InkPaint.Polygon} path - The path data used to construct the polygon.\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  drawPolygon(path) {\n    // prevents an argument assignment deopt\n    // see section 3.1: https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments\n    let points = path;\n\n    let closed = true;\n\n    if (points instanceof Polygon) {\n      closed = points.closed;\n      points = points.points;\n    }\n\n    if (!Array.isArray(points)) {\n      // prevents an argument leak deopt\n      // see section 3.2: https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments\n      points = new Array(arguments.length);\n\n      for (let i = 0; i < points.length; ++i) {\n        points[i] = arguments[i]; // eslint-disable-line prefer-rest-params\n      }\n    }\n\n    const shape = new Polygon(points);\n\n    shape.closed = closed;\n\n    this.drawShape(shape);\n\n    return this;\n  }\n\n  /**\n   * Draw a star shape with an abitrary number of points.\n   *\n   * @param {number} x - Center X position of the star\n   * @param {number} y - Center Y position of the star\n   * @param {number} points - The number of points of the star, must be > 1\n   * @param {number} radius - The outer radius of the star\n   * @param {number} [innerRadius] - The inner radius between points, default half `radius`\n   * @param {number} [rotation=0] - The rotation of the star in radians, where 0 is vertical\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  drawStar(x, y, points, radius, innerRadius, rotation = 0) {\n    innerRadius = innerRadius || radius / 2;\n\n    const startAngle = (-1 * Math.PI) / 2 + rotation;\n    const len = points * 2;\n    const delta = PI_2 / len;\n    const polygon = [];\n\n    for (let i = 0; i < len; i++) {\n      const r = i % 2 ? innerRadius : radius;\n      const angle = i * delta + startAngle;\n\n      polygon.push(x + r * Math.cos(angle), y + r * Math.sin(angle));\n    }\n\n    return this.drawPolygon(polygon);\n  }\n\n  /**\n   * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.\n   *\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  clear() {\n    if (this.lineWidth || this.filling || this.graphicsData.length > 0) {\n      this.lineWidth = 0;\n      this.lineAlignment = 0.5;\n\n      this.filling = false;\n\n      this.boundsDirty = -1;\n      this.canvasTintDirty = -1;\n      this.dirty++;\n      this.clearDirty++;\n      this.graphicsData.length = 0;\n    }\n\n    this.currentPath = null;\n    this._spriteRect = null;\n\n    return this;\n  }\n\n  /**\n   * True if graphics consists of one rectangle, and thus, can be drawn like a Sprite and\n   * masked with gl.scissor.\n   *\n   * @returns {boolean} True if only 1 rect.\n   */\n  isFastRect() {\n    return (\n      this.graphicsData.length === 1 &&\n      this.graphicsData[0].shape.type === SHAPES.RECT &&\n      !this.graphicsData[0].lineWidth\n    );\n  }\n\n  /**\n   * Renders the object using the WebGL renderer\n   *\n   * @private\n   * @param {InkPaint.WebGLRenderer} renderer - The renderer\n   */\n  _renderWebGL(renderer) {\n    // if the sprite is not visible or the alpha is 0 then no need to render this element\n    if (this.dirty !== this.fastRectDirty) {\n      this.fastRectDirty = this.dirty;\n      this._fastRect = this.isFastRect();\n    }\n\n    // TODO this check can be moved to dirty?\n    if (this._fastRect) {\n      this._renderSpriteRect(renderer);\n    } else {\n      renderer.setObjectRenderer(renderer.plugins.graphics);\n      renderer.plugins.graphics.render(this);\n    }\n  }\n\n  /**\n   * Renders a sprite rectangle.\n   *\n   * @private\n   * @param {InkPaint.WebGLRenderer} renderer - The renderer\n   */\n  _renderSpriteRect(renderer) {\n    const rect = this.graphicsData[0].shape;\n\n    if (!this._spriteRect) {\n      this._spriteRect = new Sprite(new Texture(Texture.EMPTY));\n    }\n\n    const sprite = this._spriteRect;\n    const fillColor = this.graphicsData[0].fillColor;\n\n    if (this.tint === 0xffffff) {\n      sprite.tint = fillColor;\n    } else if (\n      this.tint !== this._prevRectTint ||\n      fillColor !== this._prevRectFillColor\n    ) {\n      const t1 = tempColor1;\n      const t2 = tempColor2;\n\n      hex2rgb(fillColor, t1);\n      hex2rgb(this.tint, t2);\n\n      t1[0] *= t2[0];\n      t1[1] *= t2[1];\n      t1[2] *= t2[2];\n\n      sprite.tint = rgb2hex(t1);\n\n      this._prevRectTint = this.tint;\n      this._prevRectFillColor = fillColor;\n    }\n\n    sprite.alpha = this.graphicsData[0].fillAlpha;\n    sprite.worldAlpha = this.worldAlpha * sprite.alpha;\n    sprite.blendMode = this.blendMode;\n\n    sprite._texture._frame.width = rect.width;\n    sprite._texture._frame.height = rect.height;\n\n    sprite.transform.worldTransform = this.transform.worldTransform;\n\n    sprite.anchor.set(-rect.x / rect.width, -rect.y / rect.height);\n    sprite._onAnchorUpdate();\n\n    sprite._renderWebGL(renderer);\n  }\n\n  _renderCanvas(renderer) {\n    if (this.isMask === true) {\n      return;\n    }\n\n    renderer.plugins.graphics.render(this);\n  }\n\n  /**\n   * Retrieves the bounds of the graphic shape as a rectangle object\n   *\n   * @private\n   */\n  _calculateBounds() {\n    if (this.boundsDirty !== this.dirty) {\n      this.boundsDirty = this.dirty;\n      this.updateLocalBounds();\n\n      this.cachedSpriteDirty = true;\n    }\n\n    const lb = this._localBounds;\n\n    this._bounds.addFrame(this.transform, lb.minX, lb.minY, lb.maxX, lb.maxY);\n  }\n\n  /**\n   * Tests if a point is inside this graphics object\n   *\n   * @param {InkPaint.Point} point - the point to test\n   * @return {boolean} the result of the test\n   */\n  containsPoint(point) {\n    this.worldTransform.applyInverse(point, tempPoint);\n\n    const graphicsData = this.graphicsData;\n\n    for (let i = 0; i < graphicsData.length; ++i) {\n      const data = graphicsData[i];\n\n      if (!data.fill) {\n        continue;\n      }\n\n      // only deal with fills..\n      if (data.shape) {\n        if (data.shape.contains(tempPoint.x, tempPoint.y)) {\n          let hitHole = false;\n\n          if (data.holes) {\n            for (let i = 0; i < data.holes.length; i++) {\n              const hole = data.holes[i];\n\n              if (hole.contains(tempPoint.x, tempPoint.y)) {\n                hitHole = true;\n                break;\n              }\n            }\n          }\n\n          if (!hitHole) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Update the bounds of the object\n   *\n   */\n  updateLocalBounds() {\n    let minX = Infinity;\n    let maxX = -Infinity;\n\n    let minY = Infinity;\n    let maxY = -Infinity;\n\n    if (this.graphicsData.length) {\n      let shape = 0;\n      let x = 0;\n      let y = 0;\n      let w = 0;\n      let h = 0;\n\n      for (let i = 0; i < this.graphicsData.length; i++) {\n        const data = this.graphicsData[i];\n        const type = data.type;\n        const lineWidth = data.lineWidth;\n        const lineAlignment = data.lineAlignment;\n\n        const lineOffset = lineWidth * lineAlignment;\n\n        shape = data.shape;\n\n        if (type === SHAPES.RECT || type === SHAPES.RREC) {\n          x = shape.x - lineOffset;\n          y = shape.y - lineOffset;\n          w = shape.width + lineOffset * 2;\n          h = shape.height + lineOffset * 2;\n\n          minX = x < minX ? x : minX;\n          maxX = x + w > maxX ? x + w : maxX;\n\n          minY = y < minY ? y : minY;\n          maxY = y + h > maxY ? y + h : maxY;\n        } else if (type === SHAPES.CIRC) {\n          x = shape.x;\n          y = shape.y;\n          w = shape.radius + lineOffset;\n          h = shape.radius + lineOffset;\n\n          minX = x - w < minX ? x - w : minX;\n          maxX = x + w > maxX ? x + w : maxX;\n\n          minY = y - h < minY ? y - h : minY;\n          maxY = y + h > maxY ? y + h : maxY;\n        } else if (type === SHAPES.ELIP) {\n          x = shape.x;\n          y = shape.y;\n          w = shape.width + lineOffset;\n          h = shape.height + lineOffset;\n\n          minX = x - w < minX ? x - w : minX;\n          maxX = x + w > maxX ? x + w : maxX;\n\n          minY = y - h < minY ? y - h : minY;\n          maxY = y + h > maxY ? y + h : maxY;\n        } else {\n          // POLY\n          const points = shape.points;\n          let x2 = 0;\n          let y2 = 0;\n          let dx = 0;\n          let dy = 0;\n          let rw = 0;\n          let rh = 0;\n          let cx = 0;\n          let cy = 0;\n\n          for (let j = 0; j + 2 < points.length; j += 2) {\n            x = points[j];\n            y = points[j + 1];\n            x2 = points[j + 2];\n            y2 = points[j + 3];\n            dx = Math.abs(x2 - x);\n            dy = Math.abs(y2 - y);\n            h = lineOffset * 2;\n            w = Math.sqrt(dx * dx + dy * dy);\n\n            if (w < 1e-9) {\n              continue;\n            }\n\n            rw = ((h / w) * dy + dx) / 2;\n            rh = ((h / w) * dx + dy) / 2;\n            cx = (x2 + x) / 2;\n            cy = (y2 + y) / 2;\n\n            minX = cx - rw < minX ? cx - rw : minX;\n            maxX = cx + rw > maxX ? cx + rw : maxX;\n\n            minY = cy - rh < minY ? cy - rh : minY;\n            maxY = cy + rh > maxY ? cy + rh : maxY;\n          }\n        }\n      }\n    } else {\n      minX = 0;\n      maxX = 0;\n      minY = 0;\n      maxY = 0;\n    }\n\n    const padding = this.boundsPadding;\n\n    this._localBounds.minX = minX - padding;\n    this._localBounds.maxX = maxX + padding;\n\n    this._localBounds.minY = minY - padding;\n    this._localBounds.maxY = maxY + padding;\n  }\n\n  /**\n   * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.\n   *\n   * @param {InkPaint.Circle|InkPaint.Ellipse|InkPaint.Polygon|InkPaint.Rectangle|InkPaint.RoundedRectangle} shape - The shape object to draw.\n   * @return {InkPaint.GraphicsData} The generated GraphicsData object.\n   */\n  drawShape(shape) {\n    if (this.currentPath) {\n      // check current path!\n      if (this.currentPath.shape.points.length <= 2) {\n        this.graphicsData.pop();\n      }\n    }\n\n    this.currentPath = null;\n\n    const data = new GraphicsData(\n      this.lineWidth,\n      this.lineColor,\n      this.lineAlpha,\n      this.fillColor,\n      this.fillAlpha,\n      this.filling,\n      this.nativeLines,\n      shape,\n      this.lineAlignment\n    );\n\n    this.graphicsData.push(data);\n\n    if (data.type === SHAPES.POLY) {\n      data.shape.closed = data.shape.closed;\n      this.currentPath = data;\n    }\n\n    this.dirty++;\n\n    return data;\n  }\n\n  generateCanvasTexture(scaleMode, resolution = 1) {\n    const bounds = this.getLocalBounds();\n\n    const canvasBuffer = RenderTexture.create(\n      bounds.width,\n      bounds.height,\n      scaleMode,\n      resolution\n    );\n\n    if (!canvasRenderer) {\n      canvasRenderer = new CanvasRenderer();\n    }\n\n    this.transform.updateLocalTransform();\n    this.transform.localTransform.copy(tempMatrix);\n\n    tempMatrix.invert();\n\n    tempMatrix.tx -= bounds.x;\n    tempMatrix.ty -= bounds.y;\n\n    canvasRenderer.render(this, canvasBuffer, true, tempMatrix);\n\n    const texture = Texture.fromCanvas(\n      canvasBuffer.baseTexture._canvasRenderTarget.canvas,\n      scaleMode,\n      \"graphics\"\n    );\n\n    texture.baseTexture.resolution = resolution;\n    texture.baseTexture.update();\n\n    return texture;\n  }\n\n  /**\n   * Closes the current path.\n   *\n   * @return {InkPaint.Graphics} Returns itself.\n   */\n  closePath() {\n    // ok so close path assumes next one is a hole!\n    const currentPath = this.currentPath;\n\n    if (currentPath && currentPath.shape) {\n      currentPath.shape.close();\n    }\n\n    return this;\n  }\n\n  /**\n   * Adds a hole in the current path.\n   *\n   * @return {InkPaint.Graphics} Returns itself.\n   */\n  addHole() {\n    // this is a hole!\n    const hole = this.graphicsData.pop();\n\n    this.currentPath = this.graphicsData[this.graphicsData.length - 1];\n\n    this.currentPath.addHole(hole.shape);\n    this.currentPath = null;\n\n    return this;\n  }\n\n  /**\n   * Destroys the Graphics object.\n   *\n   * @param {object|boolean} [options] - Options parameter. A boolean will act as if all\n   *  options have been set to that value\n   * @param {boolean} [options.children=false] - if set to true, all the children will have\n   *  their destroy method called as well. 'options' will be passed on to those calls.\n   * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n   *  Should it destroy the texture of the child sprite\n   * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n   *  Should it destroy the base texture of the child sprite\n   */\n  destroy(options) {\n    super.destroy(options);\n\n    // destroy each of the GraphicsData objects\n    for (let i = 0; i < this.graphicsData.length; ++i) {\n      this.graphicsData[i].destroy();\n    }\n\n    // for each webgl data entry, destroy the WebGLGraphicsData\n    for (const id in this._webGL) {\n      for (let j = 0; j < this._webGL[id].data.length; ++j) {\n        this._webGL[id].data[j].destroy();\n      }\n    }\n\n    if (this._spriteRect) {\n      this._spriteRect.destroy();\n    }\n\n    this.graphicsData = null;\n\n    this.currentPath = null;\n    this._webGL = null;\n    this._localBounds = null;\n  }\n}\n\nGraphics._SPRITE_TEXTURE = null;\n\nGraphics.CURVES = {\n  adaptive: false,\n  maxLength: 10,\n  minSegments: 8,\n  maxSegments: 2048\n};\n"],"mappings":"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"}