{"version":3,"file":"buildPoly.js","names":["buildPoly","graphicsData","webGLData","webGLDataNativeLines","points","shape","slice","fill","length","holeArray","holes","i","hole","push","concat","verts","indices","color","hex2rgb","fillColor","alpha","fillAlpha","r","g","b","triangles","earcut","vertPos","lineWidth","buildLine"],"sources":["../../../../src/graphics/webgl/utils/buildPoly.js"],"sourcesContent":["import buildLine from \"./buildLine\";\nimport { hex2rgb } from \"../../../utils\";\nimport earcut from \"earcut\";\n\nexport default function buildPoly(\n  graphicsData,\n  webGLData,\n  webGLDataNativeLines\n) {\n  graphicsData.points = graphicsData.shape.points.slice();\n\n  let points = graphicsData.points;\n\n  if (graphicsData.fill && points.length >= 6) {\n    const holeArray = [];\n    // Process holes..\n    const holes = graphicsData.holes;\n\n    for (let i = 0; i < holes.length; i++) {\n      const hole = holes[i];\n\n      holeArray.push(points.length / 2);\n\n      points = points.concat(hole.points);\n    }\n\n    // get first and last point.. figure out the middle!\n    const verts = webGLData.points;\n    const indices = webGLData.indices;\n\n    const length = points.length / 2;\n\n    // sort color\n    const color = hex2rgb(graphicsData.fillColor);\n    const alpha = graphicsData.fillAlpha;\n    const r = color[0] * alpha;\n    const g = color[1] * alpha;\n    const b = color[2] * alpha;\n\n    const triangles = earcut(points, holeArray, 2);\n\n    if (!triangles) {\n      return;\n    }\n\n    const vertPos = verts.length / 6;\n\n    for (let i = 0; i < triangles.length; i += 3) {\n      indices.push(triangles[i] + vertPos);\n      indices.push(triangles[i] + vertPos);\n      indices.push(triangles[i + 1] + vertPos);\n      indices.push(triangles[i + 2] + vertPos);\n      indices.push(triangles[i + 2] + vertPos);\n    }\n\n    for (let i = 0; i < length; i++) {\n      verts.push(points[i * 2], points[i * 2 + 1], r, g, b, alpha);\n    }\n  }\n\n  if (graphicsData.lineWidth > 0) {\n    buildLine(graphicsData, webGLData, webGLDataNativeLines);\n  }\n}\n"],"mappings":";;;;;;AAAA;AACA;AACA;AAA4B;AAEb,SAASA,SAAS,CAC/BC,YAAY,EACZC,SAAS,EACTC,oBAAoB,EACpB;EACAF,YAAY,CAACG,MAAM,GAAGH,YAAY,CAACI,KAAK,CAACD,MAAM,CAACE,KAAK,EAAE;EAEvD,IAAIF,MAAM,GAAGH,YAAY,CAACG,MAAM;EAEhC,IAAIH,YAAY,CAACM,IAAI,IAAIH,MAAM,CAACI,MAAM,IAAI,CAAC,EAAE;IAC3C,IAAMC,SAAS,GAAG,EAAE;IACpB;IACA,IAAMC,KAAK,GAAGT,YAAY,CAACS,KAAK;IAEhC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACF,MAAM,EAAEG,CAAC,EAAE,EAAE;MACrC,IAAMC,IAAI,GAAGF,KAAK,CAACC,CAAC,CAAC;MAErBF,SAAS,CAACI,IAAI,CAACT,MAAM,CAACI,MAAM,GAAG,CAAC,CAAC;MAEjCJ,MAAM,GAAGA,MAAM,CAACU,MAAM,CAACF,IAAI,CAACR,MAAM,CAAC;IACrC;;IAEA;IACA,IAAMW,KAAK,GAAGb,SAAS,CAACE,MAAM;IAC9B,IAAMY,OAAO,GAAGd,SAAS,CAACc,OAAO;IAEjC,IAAMR,MAAM,GAAGJ,MAAM,CAACI,MAAM,GAAG,CAAC;;IAEhC;IACA,IAAMS,KAAK,GAAG,IAAAC,cAAO,EAACjB,YAAY,CAACkB,SAAS,CAAC;IAC7C,IAAMC,KAAK,GAAGnB,YAAY,CAACoB,SAAS;IACpC,IAAMC,CAAC,GAAGL,KAAK,CAAC,CAAC,CAAC,GAAGG,KAAK;IAC1B,IAAMG,CAAC,GAAGN,KAAK,CAAC,CAAC,CAAC,GAAGG,KAAK;IAC1B,IAAMI,CAAC,GAAGP,KAAK,CAAC,CAAC,CAAC,GAAGG,KAAK;IAE1B,IAAMK,SAAS,GAAG,IAAAC,eAAM,EAACtB,MAAM,EAAEK,SAAS,EAAE,CAAC,CAAC;IAE9C,IAAI,CAACgB,SAAS,EAAE;MACd;IACF;IAEA,IAAME,OAAO,GAAGZ,KAAK,CAACP,MAAM,GAAG,CAAC;IAEhC,KAAK,IAAIG,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAGc,SAAS,CAACjB,MAAM,EAAEG,EAAC,IAAI,CAAC,EAAE;MAC5CK,OAAO,CAACH,IAAI,CAACY,SAAS,CAACd,EAAC,CAAC,GAAGgB,OAAO,CAAC;MACpCX,OAAO,CAACH,IAAI,CAACY,SAAS,CAACd,EAAC,CAAC,GAAGgB,OAAO,CAAC;MACpCX,OAAO,CAACH,IAAI,CAACY,SAAS,CAACd,EAAC,GAAG,CAAC,CAAC,GAAGgB,OAAO,CAAC;MACxCX,OAAO,CAACH,IAAI,CAACY,SAAS,CAACd,EAAC,GAAG,CAAC,CAAC,GAAGgB,OAAO,CAAC;MACxCX,OAAO,CAACH,IAAI,CAACY,SAAS,CAACd,EAAC,GAAG,CAAC,CAAC,GAAGgB,OAAO,CAAC;IAC1C;IAEA,KAAK,IAAIhB,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAGH,MAAM,EAAEG,GAAC,EAAE,EAAE;MAC/BI,KAAK,CAACF,IAAI,CAACT,MAAM,CAACO,GAAC,GAAG,CAAC,CAAC,EAAEP,MAAM,CAACO,GAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAEW,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEJ,KAAK,CAAC;IAC9D;EACF;EAEA,IAAInB,YAAY,CAAC2B,SAAS,GAAG,CAAC,EAAE;IAC9B,IAAAC,kBAAS,EAAC5B,YAAY,EAAEC,SAAS,EAAEC,oBAAoB,CAAC;EAC1D;AACF"}