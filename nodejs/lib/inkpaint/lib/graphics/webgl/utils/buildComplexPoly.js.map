{"version":3,"file":"buildComplexPoly.js","names":["buildComplexPoly","graphicsData","webGLData","points","slice","length","indices","alpha","fillAlpha","color","hex2rgb","fillColor","minX","Infinity","maxX","minY","maxY","x","y","i","push"],"sources":["../../../../src/graphics/webgl/utils/buildComplexPoly.js"],"sourcesContent":["import { hex2rgb } from '../../../utils';\n\n/**\n * Builds a complex polygon to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {InkPaint.Graphics} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n */\nexport default function buildComplexPoly(graphicsData, webGLData)\n{\n    // TODO - no need to copy this as it gets turned into a Float32Array anyways..\n    const points = graphicsData.points.slice();\n\n    if (points.length < 6)\n    {\n        return;\n    }\n\n    // get first and last point.. figure out the middle!\n    const indices = webGLData.indices;\n\n    webGLData.points = points;\n    webGLData.alpha = graphicsData.fillAlpha;\n    webGLData.color = hex2rgb(graphicsData.fillColor);\n\n    // calculate the bounds..\n    let minX = Infinity;\n    let maxX = -Infinity;\n\n    let minY = Infinity;\n    let maxY = -Infinity;\n\n    let x = 0;\n    let y = 0;\n\n    // get size..\n    for (let i = 0; i < points.length; i += 2)\n    {\n        x = points[i];\n        y = points[i + 1];\n\n        minX = x < minX ? x : minX;\n        maxX = x > maxX ? x : maxX;\n\n        minY = y < minY ? y : minY;\n        maxY = y > maxY ? y : maxY;\n    }\n\n    // add a quad to the end cos there is no point making another buffer!\n    points.push(minX, minY,\n                maxX, minY,\n                maxX, maxY,\n                minX, maxY);\n\n    // push a quad onto the end..\n\n    // TODO - this aint needed!\n    const length = points.length / 2;\n\n    for (let i = 0; i < length; i++)\n    {\n        indices.push(i);\n    }\n}\n"],"mappings":";;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,gBAAgB,CAACC,YAAY,EAAEC,SAAS,EAChE;EACI;EACA,IAAMC,MAAM,GAAGF,YAAY,CAACE,MAAM,CAACC,KAAK,EAAE;EAE1C,IAAID,MAAM,CAACE,MAAM,GAAG,CAAC,EACrB;IACI;EACJ;;EAEA;EACA,IAAMC,OAAO,GAAGJ,SAAS,CAACI,OAAO;EAEjCJ,SAAS,CAACC,MAAM,GAAGA,MAAM;EACzBD,SAAS,CAACK,KAAK,GAAGN,YAAY,CAACO,SAAS;EACxCN,SAAS,CAACO,KAAK,GAAG,IAAAC,cAAO,EAACT,YAAY,CAACU,SAAS,CAAC;;EAEjD;EACA,IAAIC,IAAI,GAAGC,QAAQ;EACnB,IAAIC,IAAI,GAAG,CAACD,QAAQ;EAEpB,IAAIE,IAAI,GAAGF,QAAQ;EACnB,IAAIG,IAAI,GAAG,CAACH,QAAQ;EAEpB,IAAII,CAAC,GAAG,CAAC;EACT,IAAIC,CAAC,GAAG,CAAC;;EAET;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhB,MAAM,CAACE,MAAM,EAAEc,CAAC,IAAI,CAAC,EACzC;IACIF,CAAC,GAAGd,MAAM,CAACgB,CAAC,CAAC;IACbD,CAAC,GAAGf,MAAM,CAACgB,CAAC,GAAG,CAAC,CAAC;IAEjBP,IAAI,GAAGK,CAAC,GAAGL,IAAI,GAAGK,CAAC,GAAGL,IAAI;IAC1BE,IAAI,GAAGG,CAAC,GAAGH,IAAI,GAAGG,CAAC,GAAGH,IAAI;IAE1BC,IAAI,GAAGG,CAAC,GAAGH,IAAI,GAAGG,CAAC,GAAGH,IAAI;IAC1BC,IAAI,GAAGE,CAAC,GAAGF,IAAI,GAAGE,CAAC,GAAGF,IAAI;EAC9B;;EAEA;EACAb,MAAM,CAACiB,IAAI,CAACR,IAAI,EAAEG,IAAI,EACVD,IAAI,EAAEC,IAAI,EACVD,IAAI,EAAEE,IAAI,EACVJ,IAAI,EAAEI,IAAI,CAAC;;EAEvB;;EAEA;EACA,IAAMX,MAAM,GAAGF,MAAM,CAACE,MAAM,GAAG,CAAC;EAEhC,KAAK,IAAIc,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAGd,MAAM,EAAEc,EAAC,EAAE,EAC/B;IACIb,OAAO,CAACc,IAAI,CAACD,EAAC,CAAC;EACnB;AACJ"}