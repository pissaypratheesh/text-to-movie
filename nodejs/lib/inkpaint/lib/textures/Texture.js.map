{"version":3,"file":"Texture.js","names":["Texture","EventEmitter","constructor","baseTexture","frame","orig","trim","rotate","anchor","hasDefaultFrame","Rectangle","_uvs","_cache","valid","destroyed","requiresUpdate","cutout","cutoutColors","_frame","_rotate","Number","_updateID","transform","textureCacheIds","Error","id","uuidvx","initBaseTexture","defaultAnchor","Point","x","y","setCutoutToBaseTexture","addToCache","imageUrl","hasLoaded","width","height","on","onBaseTextureUpdated","adaptedNodeCanvas","once","onBaseTextureLoaded","onBaseTextureError","update","indexOf","push","updateSource","useCache","BaseTexture","fromImage","setCutoutColor","min","max","getImageUrl","emit","e","destroy","destroyBase","TextureCache","removeFromTextureCache","i","length","urlKey","destroyBaseTextureCache","off","clone","_updateUvs","TextureUvs","set","xNotFit","yNotFit","relationship","errorX","errorY","newEmpty","crossorigin","scaleMode","sourceScale","texture","addToTextureCache","fromFrame","frameId","fromCanvas","canvas","origin","from","source","HTMLImageElement","HTMLCanvasElement","settings","SCALE_MODE","fromLoader","name","undefined","getResolutionOfUrl","addToBaseTextureCache","removeAllHandlers","tex","EMPTY"],"sources":["../../src/textures/Texture.js"],"sourcesContent":["import BaseTexture from \"./BaseTexture\";\nimport settings from \"../settings\";\nimport TextureUvs from \"./TextureUvs\";\nimport EventEmitter from \"eventemitter3\";\nimport { Rectangle, Point } from \"../math\";\nimport { getResolutionOfUrl, uuidvx } from \"../utils\";\nimport {\n  TextureCache,\n  addToTextureCache,\n  removeFromTextureCache,\n  addToBaseTextureCache,\n  destroyBaseTextureCache\n} from \"../utils/cache\";\n\nexport default class Texture extends EventEmitter {\n  constructor(baseTexture, frame, orig, trim, rotate, anchor) {\n    super();\n\n    if (frame) {\n      this.hasDefaultFrame = true;\n    } else {\n      this.hasDefaultFrame = false;\n      frame = new Rectangle(0, 0, 1, 1);\n    }\n\n    this._uvs = null;\n    this._cache = [];\n    this.valid = false;\n    this.destroyed = false;\n    this.requiresUpdate = false;\n    this.cutout = false;\n    this.cutoutColors = null;\n\n    this.trim = trim;\n    this.orig = orig || frame;\n    this._frame = frame;\n    this._rotate = Number(rotate || 0);\n    this._updateID = 0;\n    this.transform = null;\n    this.textureCacheIds = [];\n\n    if (rotate === true) {\n      this._rotate = 2;\n    } else if (this._rotate % 2 !== 0) {\n      throw new Error(\"attempt to use diamond-shaped UVs.\");\n    }\n\n    this.id = uuidvx();\n    this.initBaseTexture(baseTexture, frame);\n    this.defaultAnchor = anchor\n      ? new Point(anchor.x, anchor.y)\n      : new Point(0, 0);\n  }\n\n  initBaseTexture(baseTexture, frame) {\n    if (baseTexture instanceof Texture) baseTexture = baseTexture.baseTexture;\n\n    this.baseTexture = baseTexture;\n    this.setCutoutToBaseTexture();\n    this.addToCache(baseTexture.imageUrl);\n\n    if (baseTexture.hasLoaded) {\n      if (!this.hasDefaultFrame) {\n        // from 1,1 -> w,h\n        const { width, height } = baseTexture;\n        this.frame = new Rectangle(0, 0, width, height);\n        baseTexture.on(\"update\", this.onBaseTextureUpdated, this);\n      } else {\n        this.frame = frame;\n      }\n\n      baseTexture.adaptedNodeCanvas();\n    } else {\n      baseTexture.once(\"loaded\", this.onBaseTextureLoaded, this);\n    }\n\n    baseTexture.on(\"error\", this.onBaseTextureError, this);\n  }\n\n  update() {\n    this.baseTexture.update();\n  }\n\n  addToCache(imageUrl) {\n    if (!imageUrl) return;\n    if (this._cache.indexOf(imageUrl) < 0) this._cache.push(imageUrl);\n  }\n\n  updateSource(imageUrl, useCache = false) {\n    if (this.baseTexture.imageUrl === imageUrl) return;\n\n    if (useCache) {\n      this.addToCache(imageUrl);\n      this.baseTexture = BaseTexture.fromImage(imageUrl);\n      this.setCutoutToBaseTexture();\n      this.baseTexture.adaptedNodeCanvas();\n    } else {\n      this.baseTexture.updateSource(imageUrl);\n    }\n  }\n\n  setCutoutColor(min, max) {\n    this.cutout = true;\n    this.cutoutColors = { min, max };\n    this.setCutoutToBaseTexture();\n  }\n\n  setCutoutToBaseTexture() {\n    if (!this.baseTexture) return;\n\n    this.baseTexture.cutout = this.cutout;\n    this.baseTexture.cutoutColors = this.cutoutColors;\n  }\n\n  getImageUrl() {\n    return this.baseTexture.imageUrl;\n  }\n\n  onBaseTextureLoaded(baseTexture) {\n    this._updateID++;\n\n    if (!this.hasDefaultFrame) {\n      // from 1,1 -> w,h\n      const { width, height } = baseTexture;\n      this.frame = new Rectangle(0, 0, width, height);\n    } else {\n      this.frame = this._frame;\n    }\n\n    baseTexture.adaptedNodeCanvas();\n    this.baseTexture.on(\"update\", this.onBaseTextureUpdated, this);\n    this.emit(\"update\", this);\n  }\n\n  onBaseTextureError(e) {\n    this.emit(\"error\", e);\n  }\n\n  onBaseTextureUpdated(baseTexture) {\n    this._updateID++;\n    if (!this.hasDefaultFrame) {\n      this._frame.width = baseTexture.width;\n      this._frame.height = baseTexture.height;\n    }\n\n    baseTexture.adaptedNodeCanvas();\n    this.emit(\"update\", this);\n  }\n\n  destroy(destroyBase) {\n    if (this.destroyed) return;\n\n    if (this.baseTexture) {\n      if (destroyBase) {\n        const { imageUrl } = this.baseTexture;\n        if (TextureCache[imageUrl]) {\n          removeFromTextureCache(imageUrl);\n        }\n\n        for (let i = 0; i < this._cache.length; i++) {\n          const urlKey = this._cache[i];\n          destroyBaseTextureCache(urlKey);\n        }\n        this.baseTexture.destroy();\n      }\n\n      this.baseTexture.off(\"update\", this.onBaseTextureUpdated, this);\n      this.baseTexture.off(\"loaded\", this.onBaseTextureLoaded, this);\n      this.baseTexture.off(\"error\", this.onBaseTextureError, this);\n      this.baseTexture = null;\n    }\n\n    this._cache.length = 0;\n    this._cache = null;\n    this._frame = null;\n    this._uvs = null;\n    this.trim = null;\n    this.orig = null;\n    this.valid = false;\n    this.cutout = false;\n    this.cutoutColors = null;\n    this.destroyed = true;\n\n    removeFromTextureCache(this);\n    this.textureCacheIds = null;\n  }\n\n  clone() {\n    return new Texture(\n      this.baseTexture,\n      this.frame,\n      this.orig,\n      this.trim,\n      this.rotate,\n      this.defaultAnchor\n    );\n  }\n\n  _updateUvs() {\n    if (!this._uvs) this._uvs = new TextureUvs();\n    this._uvs.set(this._frame, this.baseTexture, this.rotate);\n    this._updateID++;\n  }\n\n  get frame() {\n    return this._frame;\n  }\n\n  set frame(frame) {\n    this._frame = frame;\n    this.hasDefaultFrame = true;\n    const { x, y, width, height } = frame;\n    const xNotFit = x + width > this.baseTexture.width;\n    const yNotFit = y + height > this.baseTexture.height;\n\n    if (xNotFit || yNotFit) {\n      const relationship = xNotFit && yNotFit ? \"and\" : \"or\";\n      const errorX = `X: ${x} + ${width} = ${x + width} > ${\n        this.baseTexture.width\n      }`;\n      const errorY = `Y: ${y} + ${height} = ${y + height} > ${\n        this.baseTexture.height\n      }`;\n\n      throw new Error(\n        \"Texture Error: frame does not fit inside the base Texture dimensions: \" +\n          `${errorX} ${relationship} ${errorY}`\n      );\n    }\n\n    this.valid = width && height && this.baseTexture.hasLoaded;\n    if (!this.trim && !this.rotate) {\n      this.orig = frame;\n    }\n\n    if (this.valid) this._updateUvs();\n  }\n\n  get rotate() {\n    return this._rotate;\n  }\n\n  set rotate(rotate) {\n    this._rotate = rotate;\n    if (this.valid) this._updateUvs();\n  }\n\n  get width() {\n    return this.orig.width;\n  }\n\n  get height() {\n    return this.orig.height;\n  }\n\n  static newEmpty() {\n    return new Texture(new BaseTexture());\n  }\n\n  static fromImage(imageUrl, crossorigin, scaleMode, sourceScale) {\n    let texture = TextureCache[imageUrl];\n    if (texture) return texture;\n\n    if (crossorigin instanceof Rectangle) {\n      texture = new Texture(\n        BaseTexture.fromImage(imageUrl),\n        crossorigin,\n        scaleMode,\n        sourceScale\n      );\n    } else {\n      texture = new Texture(\n        BaseTexture.fromImage(imageUrl, crossorigin, scaleMode, sourceScale)\n      );\n    }\n\n    addToTextureCache(texture, imageUrl);\n    return texture;\n  }\n\n  static fromFrame(frameId) {\n    const texture = TextureCache[frameId];\n    if (!texture) {\n      throw new Error(`The frameId \"${frameId}\" does not exist in cache`);\n    }\n\n    return texture;\n  }\n\n  static fromCanvas(canvas, scaleMode, origin = \"canvas\") {\n    return new Texture(BaseTexture.fromCanvas(canvas, scaleMode, origin));\n  }\n\n  static from(source) {\n    if (typeof source === \"string\") {\n      const texture = TextureCache[source];\n      if (texture) return texture;\n      return Texture.fromImage(source);\n    } else if (source instanceof Texture) {\n      return source;\n    } else if (source instanceof HTMLImageElement) {\n      return new Texture(BaseTexture.from(source));\n    } else if (source instanceof HTMLCanvasElement) {\n      return Texture.fromCanvas(\n        source,\n        settings.SCALE_MODE,\n        \"HTMLCanvasElement\"\n      );\n    } else if (source instanceof BaseTexture) {\n      return new Texture(source);\n    }\n\n    return source;\n  }\n\n  static fromLoader(source, imageUrl, name) {\n    const baseTexture = new BaseTexture(\n      source,\n      undefined,\n      getResolutionOfUrl(imageUrl)\n    );\n\n    const texture = new Texture(baseTexture);\n    baseTexture.imageUrl = imageUrl;\n    if (!name) name = imageUrl;\n\n    addToBaseTextureCache(texture.baseTexture, name);\n    addToTextureCache(texture, name);\n\n    if (name !== imageUrl) {\n      addToBaseTextureCache(texture.baseTexture, imageUrl);\n      addToTextureCache(texture, imageUrl);\n    }\n    return texture;\n  }\n}\n\nfunction removeAllHandlers(tex) {\n  tex.destroy = () => {};\n  tex.on = () => {};\n  tex.once = () => {};\n  tex.emit = () => {};\n}\n\nTexture.EMPTY = new Texture(new BaseTexture());\nremoveAllHandlers(Texture.EMPTY);\nremoveAllHandlers(Texture.EMPTY.baseTexture);\n"],"mappings":"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"}