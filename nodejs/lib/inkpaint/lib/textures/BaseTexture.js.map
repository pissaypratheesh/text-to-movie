{"version":3,"file":"BaseTexture.js","names":["BaseTexture","EventEmitter","constructor","source","scaleMode","resolution","uid","touched","width","height","realWidth","realHeight","settings","RESOLUTION","undefined","SCALE_MODE","hasLoaded","isLoading","image","imageType","sourceScale","premultipliedAlpha","imageUrl","isPowerOfTwo","cutout","cutoutColors","mipmap","MIPMAP_TEXTURES","wrapMode","WRAP_MODE","_glTextures","_enabled","_virtalBoundId","destroyed","textureCacheIds","loadSource","updateSource","PsImage","resetImage","src","getResolutionOfUrl","wasLoading","removeHandler","firstLoaded","complete","getContext","network","hasSize","_updateImageType","_sourceLoaded","emit","onload","onerror","adaptedNodeCanvas","isPsImage","convertToImageData","min","max","cutoutImageData","pixel","data","length","i","r","g","b","h","s","l","rgb2hsl","update","naturalWidth","videoWidth","naturalHeight","videoHeight","_updateDimensions","bitTwiddle","isPow2","dataUri","decomposeDataUri","mediaType","firstSubType","subType","split","getUrlFileExt","destroy","TextureCache","dispose","removeFromBaseTextureCache","fromImage","crossorigin","baseTexture","BaseTextureCache","addToBaseTextureCache","fromCanvas","canvas","origin","__paintId","from","HTMLImageElement","HTMLCanvasElement"],"sources":["../../src/textures/BaseTexture.js"],"sourcesContent":["import PsImage from \"../polyfill/Image\";\nimport settings from \"../settings\";\nimport bitTwiddle from \"bit-twiddle\";\nimport EventEmitter from \"eventemitter3\";\nimport {\n  uid,\n  rgb2hsl,\n  getUrlFileExt,\n  decomposeDataUri,\n  getResolutionOfUrl\n} from \"../utils\";\nimport {\n  TextureCache,\n  BaseTextureCache,\n  addToBaseTextureCache,\n  removeFromBaseTextureCache\n} from \"../utils/cache\";\n\nexport default class BaseTexture extends EventEmitter {\n  constructor(source, scaleMode, resolution) {\n    super();\n\n    this.uid = uid();\n    this.touched = 0;\n    this.width = 100;\n    this.height = 100;\n    this.realWidth = 100;\n    this.realHeight = 100;\n\n    this.resolution = resolution || settings.RESOLUTION;\n    this.scaleMode = scaleMode !== undefined ? scaleMode : settings.SCALE_MODE;\n\n    this.hasLoaded = false;\n    this.isLoading = false;\n    this.image = null;\n    this.source = null;\n    this.imageType = null;\n    this.sourceScale = 1.0;\n    this.premultipliedAlpha = true;\n    this.imageUrl = null;\n    this.isPowerOfTwo = false;\n    this.cutout = false;\n    this.cutoutColors = null;\n\n    this.mipmap = settings.MIPMAP_TEXTURES;\n    this.wrapMode = settings.WRAP_MODE;\n\n    this._glTextures = {};\n    this._enabled = 0;\n    this._virtalBoundId = -1;\n    this.destroyed = false;\n    this.textureCacheIds = [];\n\n    this.loadSource(source);\n  }\n\n  updateSource(imageUrl) {\n    if (!this.image) this.image = new PsImage();\n\n    this.resetImage(this.image);\n    this.loadSource(this.image);\n    this.image.src = imageUrl;\n    this.imageUrl = imageUrl;\n    this.resolution = getResolutionOfUrl(imageUrl);\n  }\n\n  loadSource(source) {\n    if (!source) return;\n\n    const wasLoading = this.isLoading;\n    this.hasLoaded = false;\n    this.isLoading = false;\n    if (wasLoading && this.source) this.removeHandler(this.source);\n\n    const firstLoaded = !this.source;\n    this.source = source;\n\n    // source resources loaded\n    const { src, width, height, complete, getContext, network } = source;\n    const hasSize = width && height;\n\n    if (((src && complete) || (network && complete) || getContext) && hasSize) {\n      this._updateImageType();\n      this._sourceLoaded();\n      if (firstLoaded) this.emit(\"loaded\", this);\n    }\n\n    // the resource is not loaded\n    else if (!getContext) {\n      this.isLoading = true;\n      source.onload = () => {\n        this._updateImageType();\n        this.removeHandler(source);\n\n        if (!this.isLoading) return;\n        this.isLoading = false;\n        this._sourceLoaded();\n        this.emit(\"loaded\", this);\n      };\n\n      source.onerror = () => {\n        this.removeHandler(source);\n        if (!this.isLoading) return;\n        this.isLoading = false;\n        this.emit(\"error\", this);\n      };\n\n      if (complete && src) {\n        this.removeHandler(source);\n        this.isLoading = false;\n\n        if (width && height) {\n          this._sourceLoaded();\n          if (wasLoading) this.emit(\"loaded\", this);\n        } else if (wasLoading) {\n          this.emit(\"error\", this);\n        }\n      }\n    }\n  }\n\n  removeHandler(source) {\n    source.onload = null;\n    source.onerror = null;\n  }\n\n  resetImage(image) {\n    image.src = \"\";\n    image.width = 0;\n    image.height = 0;\n  }\n\n  adaptedNodeCanvas() {\n    const { source, cutout, cutoutColors } = this;\n    if (source && source instanceof PsImage && source.isPsImage) {\n      this.source = PsImage.convertToImageData(source);\n\n      if (cutout) {\n        const { min, max } = cutoutColors;\n        this.cutoutImageData({ pixel: this.source, min, max });\n      }\n    }\n  }\n\n  cutoutImageData({ pixel, min, max }) {\n    const { data } = pixel;\n    const length = data.length;\n\n    for (let i = 0; i < length; i += 4) {\n      const r = data[i + 0];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      const [h, s, l] = rgb2hsl(r, g, b);\n\n      if (h > min && h < max) {\n        data[i + 3] = 0;\n      }\n    }\n  }\n\n  update() {\n    if (this.imageType !== \"svg\") {\n      this.realWidth =\n        this.source.naturalWidth || this.source.videoWidth || this.source.width;\n\n      this.realHeight =\n        this.source.naturalHeight ||\n        this.source.videoHeight ||\n        this.source.height;\n\n      // update width and height\n      this._updateDimensions();\n    }\n\n    this.emit(\"update\", this);\n  }\n\n  _updateDimensions() {\n    this.width = this.realWidth / this.resolution;\n    this.height = this.realHeight / this.resolution;\n\n    this.isPowerOfTwo =\n      bitTwiddle.isPow2(this.realWidth) && bitTwiddle.isPow2(this.realHeight);\n  }\n\n  _updateImageType() {\n    if (!this.imageUrl) return;\n\n    const dataUri = decomposeDataUri(this.imageUrl);\n    let imageType;\n\n    if (dataUri && dataUri.mediaType === \"image\") {\n      const firstSubType = dataUri.subType.split(\"+\")[0];\n      imageType = getUrlFileExt(`.${firstSubType}`);\n    } else {\n      imageType = getUrlFileExt(this.imageUrl);\n    }\n\n    this.imageType = imageType || \"png\";\n  }\n\n  _sourceLoaded() {\n    this.hasLoaded = true;\n    this.update();\n  }\n\n  destroy() {\n    if (this.imageUrl) {\n      delete TextureCache[this.imageUrl];\n      this.imageUrl = null;\n      this.source.src = \"\";\n      this.removeHandler(this.source);\n    }\n\n    if (this.image) {\n      this.image.src = \"\";\n      this.image = null;\n    }\n\n    this.source = null;\n    this.dispose();\n\n    removeFromBaseTextureCache(this);\n    this.textureCacheIds = null;\n    this.destroyed = true;\n    this.cutout = false;\n    this.cutoutColors = null;\n  }\n\n  dispose() {\n    this.emit(\"dispose\", this);\n  }\n\n  static fromImage(imageUrl, crossorigin, scaleMode, sourceScale) {\n    let baseTexture = BaseTextureCache[imageUrl];\n\n    if (!baseTexture) {\n      const image = new PsImage();\n      baseTexture = new BaseTexture(image, scaleMode);\n      baseTexture.imageUrl = imageUrl;\n\n      if (sourceScale) baseTexture.sourceScale = sourceScale;\n      baseTexture.resolution = getResolutionOfUrl(imageUrl);\n      image.src = imageUrl;\n\n      addToBaseTextureCache(baseTexture, imageUrl);\n    }\n\n    return baseTexture;\n  }\n\n  static fromCanvas(canvas, scaleMode, origin = \"canvas\") {\n    if (!canvas.__paintId) canvas.__paintId = `${origin}_${uid()}`;\n\n    let baseTexture = BaseTextureCache[canvas.__paintId];\n    if (!baseTexture) {\n      baseTexture = new BaseTexture(canvas, scaleMode);\n      addToBaseTextureCache(baseTexture, canvas.__paintId);\n    }\n\n    return baseTexture;\n  }\n\n  static from(source, scaleMode, sourceScale) {\n    if (typeof source === \"string\") {\n      return BaseTexture.fromImage(source, undefined, scaleMode, sourceScale);\n    } else if (source instanceof HTMLImageElement) {\n      const imageUrl = source.src;\n      let baseTexture = BaseTextureCache[imageUrl];\n\n      if (!baseTexture) {\n        baseTexture = new BaseTexture(source, scaleMode);\n        baseTexture.imageUrl = imageUrl;\n\n        if (sourceScale) {\n          baseTexture.sourceScale = sourceScale;\n        }\n\n        baseTexture.resolution = getResolutionOfUrl(imageUrl);\n        addToBaseTextureCache(baseTexture, imageUrl);\n      }\n\n      return baseTexture;\n    } else if (source instanceof HTMLCanvasElement) {\n      return BaseTexture.fromCanvas(source, scaleMode);\n    }\n\n    return source;\n  }\n}\n"],"mappings":"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"}