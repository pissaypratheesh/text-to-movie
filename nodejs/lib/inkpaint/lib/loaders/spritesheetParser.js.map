{"version":3,"file":"spritesheetParser.js","names":["spritesheetParser","resource","next","imageResourceName","name","data","type","Resource","TYPE","JSON","frames","resources","loadOptions","crossOrigin","metadata","imageMetadata","parentResource","resourcePath","getResourcePath","baseUrl","add","onImageLoad","res","error","spritesheet","Spritesheet","texture","baseTexture","url","parse","textures","isDataUrl","meta","image","resolve","replace"],"sources":["../../src/loaders/spritesheetParser.js"],"sourcesContent":["import url from \"url\";\nimport { Resource } from \"../resource\";\nimport Spritesheet from \"../textures/Spritesheet\";\n\nexport default function() {\n  return function spritesheetParser(resource, next) {\n    const imageResourceName = `${resource.name}_image`;\n\n    if (\n      !resource.data ||\n      resource.type !== Resource.TYPE.JSON ||\n      !resource.data.frames ||\n      this.resources[imageResourceName]\n    ) {\n      next();\n      return;\n    }\n\n    const loadOptions = {\n      crossOrigin: resource.crossOrigin,\n      metadata: resource.metadata.imageMetadata,\n      parentResource: resource\n    };\n\n    const resourcePath = getResourcePath(resource, this.baseUrl);\n\n    // load the image for this sheet\n    this.add(imageResourceName, resourcePath, loadOptions, function onImageLoad(\n      res\n    ) {\n      if (res.error) {\n        next(res.error);\n        return;\n      }\n\n      const spritesheet = new Spritesheet(\n        res.texture.baseTexture,\n        resource.data,\n        resource.url\n      );\n      spritesheet.parse(() => {\n        resource.spritesheet = spritesheet;\n        resource.textures = spritesheet.textures;\n        next();\n      });\n    });\n  };\n}\n\nexport function getResourcePath(resource, baseUrl) {\n  // Prepend url path unless the resource image is a data url\n  if (resource.isDataUrl) {\n    return resource.data.meta.image;\n  }\n\n  return url.resolve(\n    resource.url.replace(baseUrl, \"\"),\n    resource.data.meta.image\n  );\n}\n"],"mappings":";;;;;;;AAAA;AACA;AACA;AAAkD;AAEnC,oBAAW;EACxB,OAAO,SAASA,iBAAiB,CAACC,QAAQ,EAAEC,IAAI,EAAE;IAChD,IAAMC,iBAAiB,GAAMF,QAAQ,CAACG,IAAI,WAAQ;IAElD,IACE,CAACH,QAAQ,CAACI,IAAI,IACdJ,QAAQ,CAACK,IAAI,KAAKC,kBAAQ,CAACC,IAAI,CAACC,IAAI,IACpC,CAACR,QAAQ,CAACI,IAAI,CAACK,MAAM,IACrB,IAAI,CAACC,SAAS,CAACR,iBAAiB,CAAC,EACjC;MACAD,IAAI,EAAE;MACN;IACF;IAEA,IAAMU,WAAW,GAAG;MAClBC,WAAW,EAAEZ,QAAQ,CAACY,WAAW;MACjCC,QAAQ,EAAEb,QAAQ,CAACa,QAAQ,CAACC,aAAa;MACzCC,cAAc,EAAEf;IAClB,CAAC;IAED,IAAMgB,YAAY,GAAGC,eAAe,CAACjB,QAAQ,EAAE,IAAI,CAACkB,OAAO,CAAC;;IAE5D;IACA,IAAI,CAACC,GAAG,CAACjB,iBAAiB,EAAEc,YAAY,EAAEL,WAAW,EAAE,SAASS,WAAW,CACzEC,GAAG,EACH;MACA,IAAIA,GAAG,CAACC,KAAK,EAAE;QACbrB,IAAI,CAACoB,GAAG,CAACC,KAAK,CAAC;QACf;MACF;MAEA,IAAMC,WAAW,GAAG,IAAIC,oBAAW,CACjCH,GAAG,CAACI,OAAO,CAACC,WAAW,EACvB1B,QAAQ,CAACI,IAAI,EACbJ,QAAQ,CAAC2B,GAAG,CACb;MACDJ,WAAW,CAACK,KAAK,CAAC,MAAM;QACtB5B,QAAQ,CAACuB,WAAW,GAAGA,WAAW;QAClCvB,QAAQ,CAAC6B,QAAQ,GAAGN,WAAW,CAACM,QAAQ;QACxC5B,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;AACH;AAEO,SAASgB,eAAe,CAACjB,QAAQ,EAAEkB,OAAO,EAAE;EACjD;EACA,IAAIlB,QAAQ,CAAC8B,SAAS,EAAE;IACtB,OAAO9B,QAAQ,CAACI,IAAI,CAAC2B,IAAI,CAACC,KAAK;EACjC;EAEA,OAAOL,YAAG,CAACM,OAAO,CAChBjC,QAAQ,CAAC2B,GAAG,CAACO,OAAO,CAAChB,OAAO,EAAE,EAAE,CAAC,EACjClB,QAAQ,CAACI,IAAI,CAAC2B,IAAI,CAACC,KAAK,CACzB;AACH"}